! skipped the procedure using obj_t
! void bli_obj_scalar_reset(obj_t * a);

! skipped the procedure using obj_t
! void bli_trsm_ukernel(obj_t * a , obj_t * b , obj_t * c , cntx_t * cntx);

! skipped the procedure using obj_t
! void bli_mkherm(const obj_t * a);

! skipped the procedure using obj_t
! void bli_mksymm(const obj_t * a);

! skipped the procedure using obj_t
! void bli_mktrim(const obj_t * a);

! skipped the procedure using obj_t
! void bli_obj_scalar_detach(const obj_t * a , obj_t * alpha);

! skipped the procedure using obj_t
! void bli_castm(const obj_t * a , const obj_t * b);

! skipped the procedure using obj_t
! void bli_castnzm(const obj_t * a , const obj_t * b);

! skipped the procedure using obj_t
! void bli_projm(const obj_t * a , const obj_t * b);

! skipped the procedure using obj_t
! void bli_mkherm_ex(const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_mksymm_ex(const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_mktrim_ex(const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_gemm_ukernel(obj_t * alpha , obj_t * a , obj_t * b , obj_t * beta , obj_t * c , cntx_t * cntx);

! skipped the procedure using obj_t
! void bli_gemmtrsm_ukernel(obj_t * alpha , obj_t * a1x , obj_t * a11 , obj_t * bx1 , obj_t * b11 , obj_t * c11 , cntx_t * cntx);

! skipped the procedure using obj_t
! void bli_obj_scalar_apply_scalar(const obj_t * alpha , obj_t * a);

! skipped the procedure using obj_t
! void bli_gemm(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_gemmt(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_her2k(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_syr2k(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_gemm_ex(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_gemmt_ex(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_her2k_ex(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_syr2k_ex(const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_herk(const obj_t * alpha , const obj_t * a , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_syrk(const obj_t * alpha , const obj_t * a , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_herk_ex(const obj_t * alpha , const obj_t * a , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_syrk_ex(const obj_t * alpha , const obj_t * a , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_trmv(const obj_t * alpha , const obj_t * a , const obj_t * x);

! skipped the procedure using obj_t
! void bli_trsv(const obj_t * alpha , const obj_t * a , const obj_t * x);

! skipped the procedure using obj_t
! void bli_dotxf(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_gemv(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_hemv(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_symv(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_dotxf_ex(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_gemv_ex(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_hemv_ex(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_symv_ex(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_trmv_ex(const obj_t * alpha , const obj_t * a , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_trsv_ex(const obj_t * alpha , const obj_t * a , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_axpyf(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_axpyf_ex(const obj_t * alpha , const obj_t * a , const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_dotxaxpyf(const obj_t * alpha , const obj_t * at , const obj_t * a , const obj_t * w , const obj_t * x , const obj_t * beta , const obj_t * y , const obj_t * z);

! skipped the procedure using obj_t
! void bli_dotxaxpyf_ex(const obj_t * alpha , const obj_t * at , const obj_t * a , const obj_t * w , const obj_t * x , const obj_t * beta , const obj_t * y , const obj_t * z , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_setrm(const obj_t * alpha , const obj_t * b);

! skipped the procedure using obj_t
! void bli_setim(const obj_t * alpha , const obj_t * b);

! skipped the procedure using obj_t
! void bli_setrv(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_setiv(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_scalv(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_setv(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_scald(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_setd(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_setid(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_shiftd(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_scalm(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_setm(const obj_t * alpha , const obj_t * x);

! skipped the procedure using obj_t
! void bli_her(const obj_t * alpha , const obj_t * x , const obj_t * a);

! skipped the procedure using obj_t
! void bli_syr(const obj_t * alpha , const obj_t * x , const obj_t * a);

! skipped the procedure using obj_t
! void bli_her_ex(const obj_t * alpha , const obj_t * x , const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_syr_ex(const obj_t * alpha , const obj_t * x , const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_axpbyv(const obj_t * alpha , const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_axpbyv_ex(const obj_t * alpha , const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_scalv_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_setv_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_scald_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_setd_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_setid_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_shiftd_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_scalm_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_setm_ex(const obj_t * alpha , const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_axpyv(const obj_t * alpha , const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_scal2v(const obj_t * alpha , const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_axpyd(const obj_t * alpha , const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_scal2d(const obj_t * alpha , const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_axpym(const obj_t * alpha , const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_scal2m(const obj_t * alpha , const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_ger(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * a);

! skipped the procedure using obj_t
! void bli_her2(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * a);

! skipped the procedure using obj_t
! void bli_syr2(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * a);

! skipped the procedure using obj_t
! void bli_ger_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_her2_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_syr2_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_dotxv(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * beta , const obj_t * rho);

! skipped the procedure using obj_t
! void bli_dotxv_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const obj_t * beta , const obj_t * rho , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_axpyv_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_scal2v_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_axpyd_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_scal2d_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_axpym_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_scal2m_ex(const obj_t * alpha , const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_dotaxpyv(const obj_t * alpha , const obj_t * xt , const obj_t * x , const obj_t * y , const obj_t * rho , const obj_t * z);

! skipped the procedure using obj_t
! void bli_dotaxpyv_ex(const obj_t * alpha , const obj_t * xt , const obj_t * x , const obj_t * y , const obj_t * rho , const obj_t * z , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_axpy2v(const obj_t * alphax , const obj_t * alphay , const obj_t * x , const obj_t * y , const obj_t * z);

! skipped the procedure using obj_t
! void bli_axpy2v_ex(const obj_t * alphax , const obj_t * alphay , const obj_t * x , const obj_t * y , const obj_t * z , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using void
! void bli_ssetijm(double ar , double ai , dim_t i , dim_t j , void * b , inc_t rs , inc_t cs);

! skipped the procedure using void
! void bli_dsetijm(double ar , double ai , dim_t i , dim_t j , void * b , inc_t rs , inc_t cs);

! skipped the procedure using void
! void bli_csetijm(double ar , double ai , dim_t i , dim_t j , void * b , inc_t rs , inc_t cs);

! skipped the procedure using void
! void bli_zsetijm(double ar , double ai , dim_t i , dim_t j , void * b , inc_t rs , inc_t cs);

! skipped the procedure using void
! void bli_ssetijv(double ar , double ai , dim_t i , void * x , inc_t incx);

! skipped the procedure using void
! void bli_dsetijv(double ar , double ai , dim_t i , void * x , inc_t incx);

! skipped the procedure using void
! void bli_csetijv(double ar , double ai , dim_t i , void * x , inc_t incx);

! skipped the procedure using void
! void bli_zsetijv(double ar , double ai , dim_t i , void * x , inc_t incx);

! skipped the procedure using blksz_t
! void bli_blksz_free(blksz_t * b);

! skipped the procedure using blksz_t
! void bli_blksz_init_easy(blksz_t * b , dim_t b_s , dim_t b_d , dim_t b_c , dim_t b_z);

! skipped the procedure using blksz_t
! void bli_blksz_init(blksz_t * b , dim_t b_s , dim_t b_d , dim_t b_c , dim_t b_z , dim_t be_s , dim_t be_d , dim_t be_c , dim_t be_z);

! skipped the procedure using blksz_t
! void bli_blksz_init_ed(blksz_t * b , dim_t b_s , dim_t be_s , dim_t b_d , dim_t be_d , dim_t b_c , dim_t be_c , dim_t b_z , dim_t be_z);

! skipped the procedure using char
! void bli_param_map_blis_to_char_conj(conj_t blis_conj , char * conj);

! skipped the procedure using char
! void bli_param_map_blis_to_char_diag(diag_t blis_diag , char * diag);

! skipped the procedure using num_t
! void bli_param_map_blis_to_char_dt(num_t blis_dt , char * dt);

! skipped the procedure using char
! void bli_param_map_blis_to_char_side(side_t blis_side , char * side);

! skipped the procedure using char
! void bli_param_map_blis_to_char_trans(trans_t blis_trans , char * trans);

! skipped the procedure using char
! void bli_param_map_blis_to_char_uplo(uplo_t blis_uplo , char * uplo);

! skipped the procedure using obj_t
! void bli_packm_blk_var1(const obj_t * c , obj_t * p , const cntx_t * cntx , rntm_t * rntm , cntl_t * cntl , const thrinfo_t * t);

interface
! void bli_sabsqsc(const float * chi, float * absq)
subroutine bli_sabsqsc(chi, absq) bind(c)
    use blis_kinds
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_snormfsc(const float * chi, float * absq)
subroutine bli_snormfsc(chi, absq) bind(c)
    use blis_kinds
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_ssqrtsc(const float * chi, float * psi)
subroutine bli_ssqrtsc(chi, psi) bind(c)
    use blis_kinds
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_sunzipsc(const float * chi, float * zeta_r, float * zeta_i)
subroutine bli_sunzipsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: zeta_r
  real(c_float), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

interface
! void bli_sgetsc(const float * chi, double * zeta_r, double * zeta_i)
subroutine bli_sgetsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  real(c_float), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: zeta_r
  real(c_double), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

interface
! void bli_dabsqsc(const double * chi, double * absq)
subroutine bli_dabsqsc(chi, absq) bind(c)
    use blis_kinds
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_dnormfsc(const double * chi, double * absq)
subroutine bli_dnormfsc(chi, absq) bind(c)
    use blis_kinds
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_dsqrtsc(const double * chi, double * psi)
subroutine bli_dsqrtsc(chi, psi) bind(c)
    use blis_kinds
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_dgetsc(const double * chi, double * zeta_r, double * zeta_i)
subroutine bli_dgetsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: zeta_r
  real(c_double), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

interface
! void bli_dunzipsc(const double * chi, double * zeta_r, double * zeta_i)
subroutine bli_dunzipsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: zeta_r
  real(c_double), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

interface
! void bli_zabsqsc(const dcomplex * chi, double * absq)
subroutine bli_zabsqsc(chi, absq) bind(c)
    use blis_kinds
  complex(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_znormfsc(const dcomplex * chi, double * absq)
subroutine bli_znormfsc(chi, absq) bind(c)
    use blis_kinds
  complex(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_zsqrtsc(const dcomplex * chi, dcomplex * psi)
subroutine bli_zsqrtsc(chi, psi) bind(c)
    use blis_kinds
  complex(c_double), dimension(*), intent(in) :: chi
  complex(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_zgetsc(const dcomplex * chi, double * zeta_r, double * zeta_i)
subroutine bli_zgetsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  complex(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: zeta_r
  real(c_double), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

interface
! void bli_zunzipsc(const dcomplex * chi, double * zeta_r, double * zeta_i)
subroutine bli_zunzipsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  complex(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: zeta_r
  real(c_double), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

interface
! void bli_igetsc(const dim_t * chi, double * zeta_r, double * zeta_i)
subroutine bli_igetsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  integer(dim_t), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: zeta_r
  real(c_double), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

! skipped the procedure using obj_t
! void bli_invertsc(const obj_t * chi);

! skipped the procedure using obj_t
! void bli_absqsc(const obj_t * chi , const obj_t * absq);

! skipped the procedure using obj_t
! void bli_normfsc(const obj_t * chi , const obj_t * absq);

! skipped the procedure using obj_t
! void bli_addsc(const obj_t * chi , const obj_t * psi);

! skipped the procedure using obj_t
! void bli_divsc(const obj_t * chi , const obj_t * psi);

! skipped the procedure using obj_t
! void bli_mulsc(const obj_t * chi , const obj_t * psi);

! skipped the procedure using obj_t
! void bli_sqrtsc(const obj_t * chi , const obj_t * psi);

! skipped the procedure using obj_t
! void bli_subsc(const obj_t * chi , const obj_t * psi);

! skipped the procedure using obj_t
! void bli_copysc(const obj_t * chi , const obj_t * psi);

! skipped the procedure using obj_t
! void bli_getsc(const obj_t * chi , double * zeta_r , double * zeta_i);

! skipped the procedure using obj_t
! void bli_unzipsc(const obj_t * chi , const obj_t * zeta_r , const obj_t * zeta_i);

interface
! void bli_cabsqsc(const scomplex * chi, float * absq)
subroutine bli_cabsqsc(chi, absq) bind(c)
    use blis_kinds
  complex(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_cnormfsc(const scomplex * chi, float * absq)
subroutine bli_cnormfsc(chi, absq) bind(c)
    use blis_kinds
  complex(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: absq
end subroutine
end interface

interface
! void bli_csqrtsc(const scomplex * chi, scomplex * psi)
subroutine bli_csqrtsc(chi, psi) bind(c)
    use blis_kinds
  complex(c_float), dimension(*), intent(in) :: chi
  complex(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_cunzipsc(const scomplex * chi, float * zeta_r, float * zeta_i)
subroutine bli_cunzipsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  complex(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: zeta_r
  real(c_float), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

interface
! void bli_cgetsc(const scomplex * chi, double * zeta_r, double * zeta_i)
subroutine bli_cgetsc(chi, zeta_r, zeta_i) bind(c)
    use blis_kinds
  complex(c_float), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: zeta_r
  real(c_double), dimension(*), intent(inout) :: zeta_i
end subroutine
end interface

! skipped the procedure using cntl_t
! void bli_cntl_clear_node(cntl_t * cntl);

! skipped the procedure using cntx_t
! void bli_cntx_clear(cntx_t * cntx);

! skipped the procedure using cntx_t
! void bli_gks_init_ref_cntx(cntx_t * cntx);

! skipped the procedure using cntx_t
! void bli_cntx_print(const cntx_t * cntx);

! skipped the procedure using char
! void bli_param_map_char_to_blis_conj(char conj , conj_t * blis_conj);

! skipped the procedure using obj_t
! void bli_obj_scalar_attach(conj_t conj , const obj_t * alpha , obj_t * a);

interface
! void bli_saxpyf(conj_t conja, conj_t conjx, dim_t m, dim_t b_n, const float * alpha, const float * a, inc_t inca, inc_t lda, const float * x, inc_t incx, float * y, inc_t incy)
subroutine bli_saxpyf(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saxpyf_ex(conj_t conja , conj_t conjx , dim_t m , dim_t b_n , const float * alpha , const float * a , inc_t inca , inc_t lda , const float * x , inc_t incx , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daxpyf(conj_t conja, conj_t conjx, dim_t m, dim_t b_n, const double * alpha, const double * a, inc_t inca, inc_t lda, const double * x, inc_t incx, double * y, inc_t incy)
subroutine bli_daxpyf(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daxpyf_ex(conj_t conja , conj_t conjx , dim_t m , dim_t b_n , const double * alpha , const double * a , inc_t inca , inc_t lda , const double * x , inc_t incx , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaxpyf(conj_t conja, conj_t conjx, dim_t m, dim_t b_n, const dcomplex * alpha, const dcomplex * a, inc_t inca, inc_t lda, const dcomplex * x, inc_t incx, dcomplex * y, inc_t incy)
subroutine bli_zaxpyf(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaxpyf_ex(conj_t conja , conj_t conjx , dim_t m , dim_t b_n , const dcomplex * alpha , const dcomplex * a , inc_t inca , inc_t lda , const dcomplex * x , inc_t incx , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caxpyf(conj_t conja, conj_t conjx, dim_t m, dim_t b_n, const scomplex * alpha, const scomplex * a, inc_t inca, inc_t lda, const scomplex * x, inc_t incx, scomplex * y, inc_t incy)
subroutine bli_caxpyf(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caxpyf_ex(conj_t conja , conj_t conjx , dim_t m , dim_t b_n , const scomplex * alpha , const scomplex * a , inc_t inca , inc_t lda , const scomplex * x , inc_t incx , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sscalm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const float * alpha, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_sscalm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_ssetm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const float * alpha, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_ssetm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sscalm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const float * alpha , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssetm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const float * alpha , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dscalm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const double * alpha, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_dscalm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_dsetm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const double * alpha, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_dsetm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dscalm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const double * alpha , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsetm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const double * alpha , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zscalm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const dcomplex * alpha, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zscalm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_zsetm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const dcomplex * alpha, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zsetm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zscalm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const dcomplex * alpha , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsetm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const dcomplex * alpha , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cscalm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const scomplex * alpha, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_cscalm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_csetm(conj_t conjalpha, doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const scomplex * alpha, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_csetm(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cscalm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const scomplex * alpha , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csetm_ex(conj_t conjalpha , doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const scomplex * alpha , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sscald(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const float * alpha, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_sscald(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_ssetd(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const float * alpha, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_ssetd(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sscald_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const float * alpha , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssetd_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const float * alpha , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dscald(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const double * alpha, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_dscald(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_dsetd(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const double * alpha, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_dsetd(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dscald_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const double * alpha , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsetd_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const double * alpha , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zscald(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const dcomplex * alpha, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zscald(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_zsetd(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const dcomplex * alpha, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zsetd(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zscald_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const dcomplex * alpha , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsetd_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const dcomplex * alpha , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cscald(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const scomplex * alpha, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_cscald(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_csetd(conj_t conjalpha, doff_t diagoffx, dim_t m, dim_t n, const scomplex * alpha, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_csetd(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cscald_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const scomplex * alpha , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csetd_ex(conj_t conjalpha , doff_t diagoffx , dim_t m , dim_t n , const scomplex * alpha , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sscalv(conj_t conjalpha, dim_t n, const float * alpha, float * x, inc_t incx)
subroutine bli_sscalv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_ssetv(conj_t conjalpha, dim_t n, const float * alpha, float * x, inc_t incx)
subroutine bli_ssetv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sscalv_ex(conj_t conjalpha , dim_t n , const float * alpha , float * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssetv_ex(conj_t conjalpha , dim_t n , const float * alpha , float * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dscalv(conj_t conjalpha, dim_t n, const double * alpha, double * x, inc_t incx)
subroutine bli_dscalv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_dsetv(conj_t conjalpha, dim_t n, const double * alpha, double * x, inc_t incx)
subroutine bli_dsetv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dscalv_ex(conj_t conjalpha , dim_t n , const double * alpha , double * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsetv_ex(conj_t conjalpha , dim_t n , const double * alpha , double * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zscalv(conj_t conjalpha, dim_t n, const dcomplex * alpha, dcomplex * x, inc_t incx)
subroutine bli_zscalv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_zsetv(conj_t conjalpha, dim_t n, const dcomplex * alpha, dcomplex * x, inc_t incx)
subroutine bli_zsetv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zscalv_ex(conj_t conjalpha , dim_t n , const dcomplex * alpha , dcomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsetv_ex(conj_t conjalpha , dim_t n , const dcomplex * alpha , dcomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cscalv(conj_t conjalpha, dim_t n, const scomplex * alpha, scomplex * x, inc_t incx)
subroutine bli_cscalv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_csetv(conj_t conjalpha, dim_t n, const scomplex * alpha, scomplex * x, inc_t incx)
subroutine bli_csetv(conjalpha, n, alpha, x, incx) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjalpha
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cscalv_ex(conj_t conjalpha , dim_t n , const scomplex * alpha , scomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csetv_ex(conj_t conjalpha , dim_t n , const scomplex * alpha , scomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sdotxaxpyf(conj_t conjat, conj_t conja, conj_t conjw, conj_t conjx, dim_t m, dim_t b_n, const float * alpha, const float * a, inc_t inca, inc_t lda, const float * w, inc_t incw, const float * x, inc_t incx, const float * beta, float * y, inc_t incy, float * z, inc_t incz)
subroutine bli_sdotxaxpyf(conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjw
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  real(c_float), dimension(*), intent(in) :: w
  integer(inc_t), value, intent(in) :: incw
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sdotxaxpyf_ex(conj_t conjat , conj_t conja , conj_t conjw , conj_t conjx , dim_t m , dim_t b_n , const float * alpha , const float * a , inc_t inca , inc_t lda , const float * w , inc_t incw , const float * x , inc_t incx , const float * beta , float * y , inc_t incy , float * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ddotxaxpyf(conj_t conjat, conj_t conja, conj_t conjw, conj_t conjx, dim_t m, dim_t b_n, const double * alpha, const double * a, inc_t inca, inc_t lda, const double * w, inc_t incw, const double * x, inc_t incx, const double * beta, double * y, inc_t incy, double * z, inc_t incz)
subroutine bli_ddotxaxpyf(conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjw
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  real(c_double), dimension(*), intent(in) :: w
  integer(inc_t), value, intent(in) :: incw
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ddotxaxpyf_ex(conj_t conjat , conj_t conja , conj_t conjw , conj_t conjx , dim_t m , dim_t b_n , const double * alpha , const double * a , inc_t inca , inc_t lda , const double * w , inc_t incw , const double * x , inc_t incx , const double * beta , double * y , inc_t incy , double * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zdotxaxpyf(conj_t conjat, conj_t conja, conj_t conjw, conj_t conjx, dim_t m, dim_t b_n, const dcomplex * alpha, const dcomplex * a, inc_t inca, inc_t lda, const dcomplex * w, inc_t incw, const dcomplex * x, inc_t incx, const dcomplex * beta, dcomplex * y, inc_t incy, dcomplex * z, inc_t incz)
subroutine bli_zdotxaxpyf(conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjw
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  complex(c_double), dimension(*), intent(in) :: w
  integer(inc_t), value, intent(in) :: incw
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zdotxaxpyf_ex(conj_t conjat , conj_t conja , conj_t conjw , conj_t conjx , dim_t m , dim_t b_n , const dcomplex * alpha , const dcomplex * a , inc_t inca , inc_t lda , const dcomplex * w , inc_t incw , const dcomplex * x , inc_t incx , const dcomplex * beta , dcomplex * y , inc_t incy , dcomplex * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cdotxaxpyf(conj_t conjat, conj_t conja, conj_t conjw, conj_t conjx, dim_t m, dim_t b_n, const scomplex * alpha, const scomplex * a, inc_t inca, inc_t lda, const scomplex * w, inc_t incw, const scomplex * x, inc_t incx, const scomplex * beta, scomplex * y, inc_t incy, scomplex * z, inc_t incz)
subroutine bli_cdotxaxpyf(conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjw
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  complex(c_float), dimension(*), intent(in) :: w
  integer(inc_t), value, intent(in) :: incw
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cdotxaxpyf_ex(conj_t conjat , conj_t conja , conj_t conjw , conj_t conjx , dim_t m , dim_t b_n , const scomplex * alpha , const scomplex * a , inc_t inca , inc_t lda , const scomplex * w , inc_t incw , const scomplex * x , inc_t incx , const scomplex * beta , scomplex * y , inc_t incy , scomplex * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sdotxf(conj_t conjat, conj_t conjx, dim_t m, dim_t b_n, const float * alpha, const float * a, inc_t inca, inc_t lda, const float * x, inc_t incx, const float * beta, float * y, inc_t incy)
subroutine bli_sdotxf(conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sdotxf_ex(conj_t conjat , conj_t conjx , dim_t m , dim_t b_n , const float * alpha , const float * a , inc_t inca , inc_t lda , const float * x , inc_t incx , const float * beta , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ddotxf(conj_t conjat, conj_t conjx, dim_t m, dim_t b_n, const double * alpha, const double * a, inc_t inca, inc_t lda, const double * x, inc_t incx, const double * beta, double * y, inc_t incy)
subroutine bli_ddotxf(conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ddotxf_ex(conj_t conjat , conj_t conjx , dim_t m , dim_t b_n , const double * alpha , const double * a , inc_t inca , inc_t lda , const double * x , inc_t incx , const double * beta , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zdotxf(conj_t conjat, conj_t conjx, dim_t m, dim_t b_n, const dcomplex * alpha, const dcomplex * a, inc_t inca, inc_t lda, const dcomplex * x, inc_t incx, const dcomplex * beta, dcomplex * y, inc_t incy)
subroutine bli_zdotxf(conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zdotxf_ex(conj_t conjat , conj_t conjx , dim_t m , dim_t b_n , const dcomplex * alpha , const dcomplex * a , inc_t inca , inc_t lda , const dcomplex * x , inc_t incx , const dcomplex * beta , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cdotxf(conj_t conjat, conj_t conjx, dim_t m, dim_t b_n, const scomplex * alpha, const scomplex * a, inc_t inca, inc_t lda, const scomplex * x, inc_t incx, const scomplex * beta, scomplex * y, inc_t incy)
subroutine bli_cdotxf(conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjat
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: b_n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: inca
  integer(inc_t), value, intent(in) :: lda
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cdotxf_ex(conj_t conjat , conj_t conjx , dim_t m , dim_t b_n , const scomplex * alpha , const scomplex * a , inc_t inca , inc_t lda , const scomplex * x , inc_t incx , const scomplex * beta , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sinvertsc(conj_t conjchi, float * chi)
subroutine bli_sinvertsc(conjchi, chi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_float), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_dinvertsc(conj_t conjchi, double * chi)
subroutine bli_dinvertsc(conjchi, chi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_double), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_zinvertsc(conj_t conjchi, dcomplex * chi)
subroutine bli_zinvertsc(conjchi, chi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_double), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_cinvertsc(conj_t conjchi, scomplex * chi)
subroutine bli_cinvertsc(conjchi, chi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_float), dimension(*), intent(inout) :: chi
end subroutine
end interface

! skipped the procedure using void
! void bli_sscopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_ddcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_cccopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_zzcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_sccopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_cscopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_dzcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_zdcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_sdcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_szcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_dscopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_dccopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_cdcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_czcopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_zscopysc(conj_t conjchi , const void * chi , void * psi);

! skipped the procedure using void
! void bli_zccopysc(conj_t conjchi , const void * chi , void * psi);

interface
! void bli_saddsc(conj_t conjchi, const float * chi, float * psi)
subroutine bli_saddsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_sdivsc(conj_t conjchi, const float * chi, float * psi)
subroutine bli_sdivsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_smulsc(conj_t conjchi, const float * chi, float * psi)
subroutine bli_smulsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_ssubsc(conj_t conjchi, const float * chi, float * psi)
subroutine bli_ssubsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_seqsc(conj_t conjchi, const float * chi, const float * psi, _Bool * is_eq)
subroutine bli_seqsc(conjchi, chi, psi, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_float), dimension(*), intent(in) :: chi
  real(c_float), dimension(*), intent(in) :: psi
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_daddsc(conj_t conjchi, const double * chi, double * psi)
subroutine bli_daddsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_ddivsc(conj_t conjchi, const double * chi, double * psi)
subroutine bli_ddivsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_dmulsc(conj_t conjchi, const double * chi, double * psi)
subroutine bli_dmulsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_dsubsc(conj_t conjchi, const double * chi, double * psi)
subroutine bli_dsubsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_deqsc(conj_t conjchi, const double * chi, const double * psi, _Bool * is_eq)
subroutine bli_deqsc(conjchi, chi, psi, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  real(c_double), dimension(*), intent(in) :: chi
  real(c_double), dimension(*), intent(in) :: psi
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_zaddsc(conj_t conjchi, const dcomplex * chi, dcomplex * psi)
subroutine bli_zaddsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_double), dimension(*), intent(in) :: chi
  complex(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_zdivsc(conj_t conjchi, const dcomplex * chi, dcomplex * psi)
subroutine bli_zdivsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_double), dimension(*), intent(in) :: chi
  complex(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_zmulsc(conj_t conjchi, const dcomplex * chi, dcomplex * psi)
subroutine bli_zmulsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_double), dimension(*), intent(in) :: chi
  complex(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_zsubsc(conj_t conjchi, const dcomplex * chi, dcomplex * psi)
subroutine bli_zsubsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_double), dimension(*), intent(in) :: chi
  complex(c_double), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_zeqsc(conj_t conjchi, const dcomplex * chi, const dcomplex * psi, _Bool * is_eq)
subroutine bli_zeqsc(conjchi, chi, psi, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_double), dimension(*), intent(in) :: chi
  complex(c_double), dimension(*), intent(in) :: psi
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_caddsc(conj_t conjchi, const scomplex * chi, scomplex * psi)
subroutine bli_caddsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_float), dimension(*), intent(in) :: chi
  complex(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_cdivsc(conj_t conjchi, const scomplex * chi, scomplex * psi)
subroutine bli_cdivsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_float), dimension(*), intent(in) :: chi
  complex(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_cmulsc(conj_t conjchi, const scomplex * chi, scomplex * psi)
subroutine bli_cmulsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_float), dimension(*), intent(in) :: chi
  complex(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_csubsc(conj_t conjchi, const scomplex * chi, scomplex * psi)
subroutine bli_csubsc(conjchi, chi, psi) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_float), dimension(*), intent(in) :: chi
  complex(c_float), dimension(*), intent(inout) :: psi
end subroutine
end interface

interface
! void bli_ceqsc(conj_t conjchi, const scomplex * chi, const scomplex * psi, _Bool * is_eq)
subroutine bli_ceqsc(conjchi, chi, psi, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjchi
  complex(c_float), dimension(*), intent(in) :: chi
  complex(c_float), dimension(*), intent(in) :: psi
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_sger(conj_t conjx, conj_t conjy, dim_t m, dim_t n, const float * alpha, const float * x, inc_t incx, const float * y, inc_t incy, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_sger(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sger_ex(conj_t conjx , conj_t conjy , dim_t m , dim_t n , const float * alpha , const float * x , inc_t incx , const float * y , inc_t incy , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dger(conj_t conjx, conj_t conjy, dim_t m, dim_t n, const double * alpha, const double * x, inc_t incx, const double * y, inc_t incy, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dger(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dger_ex(conj_t conjx , conj_t conjy , dim_t m , dim_t n , const double * alpha , const double * x , inc_t incx , const double * y , inc_t incy , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zger(conj_t conjx, conj_t conjy, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zger(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zger_ex(conj_t conjx , conj_t conjy , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t incx , const dcomplex * y , inc_t incy , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cger(conj_t conjx, conj_t conjy, dim_t m, dim_t n, const scomplex * alpha, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_cger(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cger_ex(conj_t conjx , conj_t conjy , dim_t m , dim_t n , const scomplex * alpha , const scomplex * x , inc_t incx , const scomplex * y , inc_t incy , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sdotxv(conj_t conjx, conj_t conjy, dim_t n, const float * alpha, const float * x, inc_t incx, const float * y, inc_t incy, const float * beta, float * rho)
subroutine bli_sdotxv(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sdotxv_ex(conj_t conjx , conj_t conjy , dim_t n , const float * alpha , const float * x , inc_t incx , const float * y , inc_t incy , const float * beta , float * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ddotxv(conj_t conjx, conj_t conjy, dim_t n, const double * alpha, const double * x, inc_t incx, const double * y, inc_t incy, const double * beta, double * rho)
subroutine bli_ddotxv(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ddotxv_ex(conj_t conjx , conj_t conjy , dim_t n , const double * alpha , const double * x , inc_t incx , const double * y , inc_t incy , const double * beta , double * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zdotxv(conj_t conjx, conj_t conjy, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, const dcomplex * beta, dcomplex * rho)
subroutine bli_zdotxv(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zdotxv_ex(conj_t conjx , conj_t conjy , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t incx , const dcomplex * y , inc_t incy , const dcomplex * beta , dcomplex * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cdotxv(conj_t conjx, conj_t conjy, dim_t n, const scomplex * alpha, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, const scomplex * beta, scomplex * rho)
subroutine bli_cdotxv(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cdotxv_ex(conj_t conjx , conj_t conjy , dim_t n , const scomplex * alpha , const scomplex * x , inc_t incx , const scomplex * y , inc_t incy , const scomplex * beta , scomplex * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_saxpy2v(conj_t conjx, conj_t conjy, dim_t n, const float * alphax, const float * alphay, const float * x, inc_t incx, const float * y, inc_t incy, float * z, inc_t incz)
subroutine bli_saxpy2v(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: alphax
  real(c_float), dimension(*), intent(in) :: alphay
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saxpy2v_ex(conj_t conjx , conj_t conjy , dim_t n , const float * alphax , const float * alphay , const float * x , inc_t incx , const float * y , inc_t incy , float * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daxpy2v(conj_t conjx, conj_t conjy, dim_t n, const double * alphax, const double * alphay, const double * x, inc_t incx, const double * y, inc_t incy, double * z, inc_t incz)
subroutine bli_daxpy2v(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: alphax
  real(c_double), dimension(*), intent(in) :: alphay
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daxpy2v_ex(conj_t conjx , conj_t conjy , dim_t n , const double * alphax , const double * alphay , const double * x , inc_t incx , const double * y , inc_t incy , double * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaxpy2v(conj_t conjx, conj_t conjy, dim_t n, const dcomplex * alphax, const dcomplex * alphay, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, dcomplex * z, inc_t incz)
subroutine bli_zaxpy2v(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: alphax
  complex(c_double), dimension(*), intent(in) :: alphay
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaxpy2v_ex(conj_t conjx , conj_t conjy , dim_t n , const dcomplex * alphax , const dcomplex * alphay , const dcomplex * x , inc_t incx , const dcomplex * y , inc_t incy , dcomplex * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caxpy2v(conj_t conjx, conj_t conjy, dim_t n, const scomplex * alphax, const scomplex * alphay, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, scomplex * z, inc_t incz)
subroutine bli_caxpy2v(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: alphax
  complex(c_float), dimension(*), intent(in) :: alphay
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caxpy2v_ex(conj_t conjx , conj_t conjy , dim_t n , const scomplex * alphax , const scomplex * alphay , const scomplex * x , inc_t incx , const scomplex * y , inc_t incy , scomplex * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sdotv(conj_t conjx, conj_t conjy, dim_t n, const float * x, inc_t incx, const float * y, inc_t incy, float * rho)
subroutine bli_sdotv(conjx, conjy, n, x, incx, y, incy, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sdotv_ex(conj_t conjx , conj_t conjy , dim_t n , const float * x , inc_t incx , const float * y , inc_t incy , float * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ddotv(conj_t conjx, conj_t conjy, dim_t n, const double * x, inc_t incx, const double * y, inc_t incy, double * rho)
subroutine bli_ddotv(conjx, conjy, n, x, incx, y, incy, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ddotv_ex(conj_t conjx , conj_t conjy , dim_t n , const double * x , inc_t incx , const double * y , inc_t incy , double * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zdotv(conj_t conjx, conj_t conjy, dim_t n, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, dcomplex * rho)
subroutine bli_zdotv(conjx, conjy, n, x, incx, y, incy, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zdotv_ex(conj_t conjx , conj_t conjy , dim_t n , const dcomplex * x , inc_t incx , const dcomplex * y , inc_t incy , dcomplex * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cdotv(conj_t conjx, conj_t conjy, dim_t n, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, scomplex * rho)
subroutine bli_cdotv(conjx, conjy, n, x, incx, y, incy, rho) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), dimension(*), intent(inout) :: rho
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cdotv_ex(conj_t conjx , conj_t conjy , dim_t n , const scomplex * x , inc_t incx , const scomplex * y , inc_t incy , scomplex * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_saxpbyv(conj_t conjx, dim_t n, const float * alpha, const float * x, inc_t incx, const float * beta, float * y, inc_t incy)
subroutine bli_saxpbyv(conjx, n, alpha, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saxpbyv_ex(conj_t conjx , dim_t n , const float * alpha , const float * x , inc_t incx , const float * beta , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_saxpyv(conj_t conjx, dim_t n, const float * alpha, const float * x, inc_t incx, float * y, inc_t incy)
subroutine bli_saxpyv(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_sscal2v(conj_t conjx, dim_t n, const float * alpha, const float * x, inc_t incx, float * y, inc_t incy)
subroutine bli_sscal2v(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saxpyv_ex(conj_t conjx , dim_t n , const float * alpha , const float * x , inc_t incx , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_sscal2v_ex(conj_t conjx , dim_t n , const float * alpha , const float * x , inc_t incx , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daxpbyv(conj_t conjx, dim_t n, const double * alpha, const double * x, inc_t incx, const double * beta, double * y, inc_t incy)
subroutine bli_daxpbyv(conjx, n, alpha, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daxpbyv_ex(conj_t conjx , dim_t n , const double * alpha , const double * x , inc_t incx , const double * beta , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daxpyv(conj_t conjx, dim_t n, const double * alpha, const double * x, inc_t incx, double * y, inc_t incy)
subroutine bli_daxpyv(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_dscal2v(conj_t conjx, dim_t n, const double * alpha, const double * x, inc_t incx, double * y, inc_t incy)
subroutine bli_dscal2v(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daxpyv_ex(conj_t conjx , dim_t n , const double * alpha , const double * x , inc_t incx , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dscal2v_ex(conj_t conjx , dim_t n , const double * alpha , const double * x , inc_t incx , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaxpbyv(conj_t conjx, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t incx, const dcomplex * beta, dcomplex * y, inc_t incy)
subroutine bli_zaxpbyv(conjx, n, alpha, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaxpbyv_ex(conj_t conjx , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t incx , const dcomplex * beta , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaxpyv(conj_t conjx, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t incx, dcomplex * y, inc_t incy)
subroutine bli_zaxpyv(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_zscal2v(conj_t conjx, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t incx, dcomplex * y, inc_t incy)
subroutine bli_zscal2v(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaxpyv_ex(conj_t conjx , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t incx , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zscal2v_ex(conj_t conjx , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t incx , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caxpbyv(conj_t conjx, dim_t n, const scomplex * alpha, const scomplex * x, inc_t incx, const scomplex * beta, scomplex * y, inc_t incy)
subroutine bli_caxpbyv(conjx, n, alpha, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caxpbyv_ex(conj_t conjx , dim_t n , const scomplex * alpha , const scomplex * x , inc_t incx , const scomplex * beta , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caxpyv(conj_t conjx, dim_t n, const scomplex * alpha, const scomplex * x, inc_t incx, scomplex * y, inc_t incy)
subroutine bli_caxpyv(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_cscal2v(conj_t conjx, dim_t n, const scomplex * alpha, const scomplex * x, inc_t incx, scomplex * y, inc_t incy)
subroutine bli_cscal2v(conjx, n, alpha, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caxpyv_ex(conj_t conjx , dim_t n , const scomplex * alpha , const scomplex * x , inc_t incx , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cscal2v_ex(conj_t conjx , dim_t n , const scomplex * alpha , const scomplex * x , inc_t incx , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using void
! void bli_sscastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_ddcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_cccastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_zzcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_sdcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_sccastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_szcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_dscastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_dccastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_dzcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_cscastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_cdcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_czcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_zscastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_zdcastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

! skipped the procedure using void
! void bli_zccastv(conj_t conjx , dim_t n , const void * x , inc_t incx , void * y , inc_t incy);

interface
! void bli_sxpbyv(conj_t conjx, dim_t n, const float * x, inc_t incx, const float * beta, float * y, inc_t incy)
subroutine bli_sxpbyv(conjx, n, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sxpbyv_ex(conj_t conjx , dim_t n , const float * x , inc_t incx , const float * beta , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_saddv(conj_t conjx, dim_t n, const float * x, inc_t incx, float * y, inc_t incy)
subroutine bli_saddv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_scopyv(conj_t conjx, dim_t n, const float * x, inc_t incx, float * y, inc_t incy)
subroutine bli_scopyv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_ssubv(conj_t conjx, dim_t n, const float * x, inc_t incx, float * y, inc_t incy)
subroutine bli_ssubv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saddv_ex(conj_t conjx , dim_t n , const float * x , inc_t incx , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_scopyv_ex(conj_t conjx , dim_t n , const float * x , inc_t incx , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssubv_ex(conj_t conjx , dim_t n , const float * x , inc_t incx , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_seqv(conj_t conjx, dim_t n, const float * x, inc_t incx, const float * y, inc_t incy, _Bool * is_eq)
subroutine bli_seqv(conjx, n, x, incx, y, incy, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_dxpbyv(conj_t conjx, dim_t n, const double * x, inc_t incx, const double * beta, double * y, inc_t incy)
subroutine bli_dxpbyv(conjx, n, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dxpbyv_ex(conj_t conjx , dim_t n , const double * x , inc_t incx , const double * beta , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daddv(conj_t conjx, dim_t n, const double * x, inc_t incx, double * y, inc_t incy)
subroutine bli_daddv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_dcopyv(conj_t conjx, dim_t n, const double * x, inc_t incx, double * y, inc_t incy)
subroutine bli_dcopyv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_dsubv(conj_t conjx, dim_t n, const double * x, inc_t incx, double * y, inc_t incy)
subroutine bli_dsubv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daddv_ex(conj_t conjx , dim_t n , const double * x , inc_t incx , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dcopyv_ex(conj_t conjx , dim_t n , const double * x , inc_t incx , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsubv_ex(conj_t conjx , dim_t n , const double * x , inc_t incx , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_deqv(conj_t conjx, dim_t n, const double * x, inc_t incx, const double * y, inc_t incy, _Bool * is_eq)
subroutine bli_deqv(conjx, n, x, incx, y, incy, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_zxpbyv(conj_t conjx, dim_t n, const dcomplex * x, inc_t incx, const dcomplex * beta, dcomplex * y, inc_t incy)
subroutine bli_zxpbyv(conjx, n, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zxpbyv_ex(conj_t conjx , dim_t n , const dcomplex * x , inc_t incx , const dcomplex * beta , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaddv(conj_t conjx, dim_t n, const dcomplex * x, inc_t incx, dcomplex * y, inc_t incy)
subroutine bli_zaddv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_zcopyv(conj_t conjx, dim_t n, const dcomplex * x, inc_t incx, dcomplex * y, inc_t incy)
subroutine bli_zcopyv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_zsubv(conj_t conjx, dim_t n, const dcomplex * x, inc_t incx, dcomplex * y, inc_t incy)
subroutine bli_zsubv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaddv_ex(conj_t conjx , dim_t n , const dcomplex * x , inc_t incx , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zcopyv_ex(conj_t conjx , dim_t n , const dcomplex * x , inc_t incx , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsubv_ex(conj_t conjx , dim_t n , const dcomplex * x , inc_t incx , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zeqv(conj_t conjx, dim_t n, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, _Bool * is_eq)
subroutine bli_zeqv(conjx, n, x, incx, y, incy, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_cxpbyv(conj_t conjx, dim_t n, const scomplex * x, inc_t incx, const scomplex * beta, scomplex * y, inc_t incy)
subroutine bli_cxpbyv(conjx, n, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cxpbyv_ex(conj_t conjx , dim_t n , const scomplex * x , inc_t incx , const scomplex * beta , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caddv(conj_t conjx, dim_t n, const scomplex * x, inc_t incx, scomplex * y, inc_t incy)
subroutine bli_caddv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_ccopyv(conj_t conjx, dim_t n, const scomplex * x, inc_t incx, scomplex * y, inc_t incy)
subroutine bli_ccopyv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_csubv(conj_t conjx, dim_t n, const scomplex * x, inc_t incx, scomplex * y, inc_t incy)
subroutine bli_csubv(conjx, n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caddv_ex(conj_t conjx , dim_t n , const scomplex * x , inc_t incx , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ccopyv_ex(conj_t conjx , dim_t n , const scomplex * x , inc_t incx , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csubv_ex(conj_t conjx , dim_t n , const scomplex * x , inc_t incx , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ceqv(conj_t conjx, dim_t n, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, _Bool * is_eq)
subroutine bli_ceqv(conjx, n, x, incx, y, incy, is_eq) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_sdotaxpyv(conj_t conjxt, conj_t conjx, conj_t conjy, dim_t n, const float * alpha, const float * x, inc_t incx, const float * y, inc_t incy, float * rho, float * z, inc_t incz)
subroutine bli_sdotaxpyv(conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjxt
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), dimension(*), intent(inout) :: rho
  real(c_float), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sdotaxpyv_ex(conj_t conjxt , conj_t conjx , conj_t conjy , dim_t n , const float * alpha , const float * x , inc_t incx , const float * y , inc_t incy , float * rho , float * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ddotaxpyv(conj_t conjxt, conj_t conjx, conj_t conjy, dim_t n, const double * alpha, const double * x, inc_t incx, const double * y, inc_t incy, double * rho, double * z, inc_t incz)
subroutine bli_ddotaxpyv(conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjxt
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), dimension(*), intent(inout) :: rho
  real(c_double), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ddotaxpyv_ex(conj_t conjxt , conj_t conjx , conj_t conjy , dim_t n , const double * alpha , const double * x , inc_t incx , const double * y , inc_t incy , double * rho , double * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zdotaxpyv(conj_t conjxt, conj_t conjx, conj_t conjy, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, dcomplex * rho, dcomplex * z, inc_t incz)
subroutine bli_zdotaxpyv(conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjxt
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), dimension(*), intent(inout) :: rho
  complex(c_double), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zdotaxpyv_ex(conj_t conjxt , conj_t conjx , conj_t conjy , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t incx , const dcomplex * y , inc_t incy , dcomplex * rho , dcomplex * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cdotaxpyv(conj_t conjxt, conj_t conjx, conj_t conjy, dim_t n, const scomplex * alpha, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, scomplex * rho, scomplex * z, inc_t incz)
subroutine bli_cdotaxpyv(conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz) bind(c)
    use blis_kinds
  integer(conj_t), value, intent(in) :: conjxt
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), dimension(*), intent(inout) :: rho
  complex(c_float), dimension(*), intent(inout) :: z
  integer(inc_t), value, intent(in) :: incz
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cdotaxpyv_ex(conj_t conjxt , conj_t conjx , conj_t conjy , dim_t n , const scomplex * alpha , const scomplex * x , inc_t incx , const scomplex * y , inc_t incy , scomplex * rho , scomplex * z , inc_t incz , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using char
! void bli_param_map_char_to_blis_diag(char diag , diag_t * blis_diag);

! skipped the procedure using char
! void bli_param_map_blis_to_netlib_diag(diag_t diag , char * blas_diag);

interface
! void bli_saxpyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const float * alpha, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_saxpyd(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_sscal2d(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const float * alpha, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_sscal2d(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saxpyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const float * alpha , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_sscal2d_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const float * alpha , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daxpyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const double * alpha, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_daxpyd(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_dscal2d(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const double * alpha, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dscal2d(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daxpyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const double * alpha , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dscal2d_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const double * alpha , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaxpyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zaxpyd(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_zscal2d(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zscal2d(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaxpyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zscal2d_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caxpyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const scomplex * alpha, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_caxpyd(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_cscal2d(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const scomplex * alpha, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_cscal2d(diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caxpyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const scomplex * alpha , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cscal2d_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const scomplex * alpha , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sxpbyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, const float * beta, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_sxpbyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sxpbyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , const float * beta , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_saddd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_saddd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_scopyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_scopyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_ssubd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_ssubd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saddd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_scopyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssubd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dxpbyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, const double * beta, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dxpbyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dxpbyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , const double * beta , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daddd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_daddd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_dcopyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dcopyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_dsubd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dsubd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daddd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dcopyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsubd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zxpbyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, const dcomplex * beta, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zxpbyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zxpbyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , const dcomplex * beta , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaddd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zaddd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_zcopyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zcopyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_zsubd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zsubd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaddd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zcopyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsubd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cxpbyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, const scomplex * beta, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_cxpbyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cxpbyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , const scomplex * beta , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caddd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_caddd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_ccopyd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_ccopyd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_csubd(doff_t diagoffx, diag_t diagx, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_csubd(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caddd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ccopyd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csubd_ex(doff_t diagoffx , diag_t diagx , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_snorm1m(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * norm)
subroutine bli_snorm1m(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_snormfm(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * norm)
subroutine bli_snormfm(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_snormim(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * norm)
subroutine bli_snormim(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_snorm1m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_snormfm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_snormim_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dnorm1m(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * norm)
subroutine bli_dnorm1m(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_dnormfm(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * norm)
subroutine bli_dnormfm(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_dnormim(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * norm)
subroutine bli_dnormim(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dnorm1m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dnormfm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dnormim_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_znorm1m(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, double * norm)
subroutine bli_znorm1m(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_znormfm(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, double * norm)
subroutine bli_znormfm(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_znormim(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, double * norm)
subroutine bli_znormim(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_znorm1m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_znormfm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_znormim_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , double * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cnorm1m(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, float * norm)
subroutine bli_cnorm1m(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_cnormfm(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, float * norm)
subroutine bli_cnormfm(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_cnormim(doff_t diagoffx, diag_t diagx, uplo_t uplox, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, float * norm)
subroutine bli_cnormim(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cnorm1m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cnormfm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cnormim_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , float * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_saxpym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * alpha, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_saxpym(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_sscal2m(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * alpha, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_sscal2m(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saxpym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * alpha , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_sscal2m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * alpha , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daxpym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * alpha, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_daxpym(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_dscal2m(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * alpha, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dscal2m(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daxpym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * alpha , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dscal2m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * alpha , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaxpym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zaxpym(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_zscal2m(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zscal2m(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaxpym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zscal2m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caxpym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * alpha, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_caxpym(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_cscal2m(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * alpha, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_cscal2m(diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caxpym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * alpha , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cscal2m_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * alpha , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sxpbym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, const float * beta, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_sxpbym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_ssxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, const float * beta, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_ssxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sxpbym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , const float * beta , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , const float * beta , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sdxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, const double * beta, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_sdxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sdxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , const double * beta , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_szxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, const dcomplex * beta, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_szxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_szxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , const dcomplex * beta , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_scxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, const scomplex * beta, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_scxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_scxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , const scomplex * beta , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_saddm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_saddm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_scopym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_scopym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_ssubm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_ssubm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_saddm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_scopym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssubm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_seqm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const float * x, inc_t rs_x, inc_t cs_x, const float * y, inc_t rs_y, inc_t cs_y, _Bool * is_eq)
subroutine bli_seqm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_dsxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, const float * beta, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dsxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dsxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , const float * beta , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dxpbym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, const double * beta, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dxpbym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_ddxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, const double * beta, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_ddxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dxpbym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , const double * beta , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ddxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , const double * beta , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dzxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, const dcomplex * beta, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dzxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dzxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , const dcomplex * beta , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dcxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, const scomplex * beta, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dcxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dcxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , const scomplex * beta , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_daddm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_daddm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_dcopym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dcopym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_dsubm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_dsubm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_daddm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dcopym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsubm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_deqm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const double * x, inc_t rs_x, inc_t cs_x, const double * y, inc_t rs_y, inc_t cs_y, _Bool * is_eq)
subroutine bli_deqm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_zsxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, const float * beta, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zsxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zsxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , const float * beta , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zdxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, const double * beta, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zdxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zdxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , const double * beta , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zxpbym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, const dcomplex * beta, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zxpbym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_zzxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, const dcomplex * beta, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zzxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zxpbym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , const dcomplex * beta , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zzxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , const dcomplex * beta , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zcxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, const scomplex * beta, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zcxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zcxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , const scomplex * beta , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zaddm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zaddm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_zcopym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zcopym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_zsubm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_zsubm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zaddm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zcopym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsubm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zeqm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const dcomplex * x, inc_t rs_x, inc_t cs_x, const dcomplex * y, inc_t rs_y, inc_t cs_y, _Bool * is_eq)
subroutine bli_zeqm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_csxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, const float * beta, float * y, inc_t rs_y, inc_t cs_y)
subroutine bli_csxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_csxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , const float * beta , float * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cdxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, const double * beta, double * y, inc_t rs_y, inc_t cs_y)
subroutine bli_cdxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cdxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , const double * beta , double * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_czxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, const dcomplex * beta, dcomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_czxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_czxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , const dcomplex * beta , dcomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cxpbym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, const scomplex * beta, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_cxpbym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_ccxpbym_md(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, const scomplex * beta, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_ccxpbym_md(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cxpbym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , const scomplex * beta , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ccxpbym_md_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , const scomplex * beta , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_caddm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_caddm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_ccopym(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_ccopym(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

interface
! void bli_csubm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, scomplex * y, inc_t rs_y, inc_t cs_y)
subroutine bli_csubm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_caddm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ccopym_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csubm_ex(doff_t diagoffx , diag_t diagx , uplo_t uplox , trans_t transx , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , scomplex * y , inc_t rs_y , inc_t cs_y , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ceqm(doff_t diagoffx, diag_t diagx, uplo_t uplox, trans_t transx, dim_t m, dim_t n, const scomplex * x, inc_t rs_x, inc_t cs_x, const scomplex * y, inc_t rs_y, inc_t cs_y, _Bool * is_eq)
subroutine bli_ceqm(diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(diag_t), value, intent(in) :: diagx
  integer(uplo_t), value, intent(in) :: uplox
  integer(trans_t), value, intent(in) :: transx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: rs_y
  integer(inc_t), value, intent(in) :: cs_y
  logical(c_bool), dimension(*), intent(inout) :: is_eq
end subroutine
end interface

interface
! void bli_ssetid(doff_t diagoffx, dim_t m, dim_t n, const float * alpha, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_ssetid(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_sshiftd(doff_t diagoffx, dim_t m, dim_t n, const float * alpha, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_sshiftd(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ssetid_ex(doff_t diagoffx , dim_t m , dim_t n , const float * alpha , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_sshiftd_ex(doff_t diagoffx , dim_t m , dim_t n , const float * alpha , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_csetid(doff_t diagoffx, dim_t m, dim_t n, const float * alpha, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_csetid(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_csetid_ex(doff_t diagoffx , dim_t m , dim_t n , const float * alpha , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dsetid(doff_t diagoffx, dim_t m, dim_t n, const double * alpha, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_dsetid(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_dshiftd(doff_t diagoffx, dim_t m, dim_t n, const double * alpha, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_dshiftd(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dsetid_ex(doff_t diagoffx , dim_t m , dim_t n , const double * alpha , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dshiftd_ex(doff_t diagoffx , dim_t m , dim_t n , const double * alpha , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zsetid(doff_t diagoffx, dim_t m, dim_t n, const double * alpha, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zsetid(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zsetid_ex(doff_t diagoffx , dim_t m , dim_t n , const double * alpha , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zshiftd(doff_t diagoffx, dim_t m, dim_t n, const dcomplex * alpha, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zshiftd(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zshiftd_ex(doff_t diagoffx , dim_t m , dim_t n , const dcomplex * alpha , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cshiftd(doff_t diagoffx, dim_t m, dim_t n, const scomplex * alpha, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_cshiftd(diagoffx, m, n, alpha, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cshiftd_ex(doff_t diagoffx , dim_t m , dim_t n , const scomplex * alpha , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sinvertd(doff_t diagoffx, dim_t m, dim_t n, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_sinvertd(diagoffx, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sinvertd_ex(doff_t diagoffx , dim_t m , dim_t n , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dinvertd(doff_t diagoffx, dim_t m, dim_t n, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_dinvertd(diagoffx, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dinvertd_ex(doff_t diagoffx , dim_t m , dim_t n , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zinvertd(doff_t diagoffx, dim_t m, dim_t n, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zinvertd(diagoffx, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zinvertd_ex(doff_t diagoffx , dim_t m , dim_t n , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cinvertd(doff_t diagoffx, dim_t m, dim_t n, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_cinvertd(diagoffx, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cinvertd_ex(doff_t diagoffx , dim_t m , dim_t n , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_srandm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_srandm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_srandnm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, float * x, inc_t rs_x, inc_t cs_x)
subroutine bli_srandnm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_srandm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_srandnm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , float * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_drandm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_drandm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_drandnm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, double * x, inc_t rs_x, inc_t cs_x)
subroutine bli_drandnm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_drandm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_drandnm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , double * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zrandm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zrandm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_zrandnm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, dcomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_zrandnm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zrandm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zrandnm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , dcomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_crandm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_crandm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

interface
! void bli_crandnm(doff_t diagoffx, uplo_t uplox, dim_t m, dim_t n, scomplex * x, inc_t rs_x, inc_t cs_x)
subroutine bli_crandnm(diagoffx, uplox, m, n, x, rs_x, cs_x) bind(c)
    use blis_kinds
  integer(doff_t), value, intent(in) :: diagoffx
  integer(uplo_t), value, intent(in) :: uplox
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: rs_x
  integer(inc_t), value, intent(in) :: cs_x
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_crandm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_crandnm_ex(doff_t diagoffx , uplo_t uplox , dim_t m , dim_t n , scomplex * x , inc_t rs_x , inc_t cs_x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using dir_t
! void bli_acquire_mpart_mdim(dir_t direct , subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using dir_t
! void bli_acquire_mpart_ndim(dir_t direct , subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using dir_t
! void bli_acquire_mpart_mndim(dir_t direct , subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using char
! void bli_param_map_char_to_blis_dt(char dt , num_t * blis_dt);

! skipped the procedure using num_t
! void bli_ind_disable_all_dt(num_t dt);

! skipped the procedure using num_t
! void bli_obj_scalar_cast_to(num_t dt , obj_t * a);

! skipped the procedure using num_t
! void bli_obj_scalar_init_detached(num_t dt , obj_t * beta);

! skipped the procedure using num_t
! void bli_obj_scalar_init_detached_copy_of(num_t dt , conj_t conj , const obj_t * alpha , obj_t * beta);

! skipped the procedure using num_t
! void bli_obj_create_without_buffer(num_t dt , dim_t m , dim_t n , obj_t * obj);

! skipped the procedure using num_t
! void bli_obj_create_with_attached_buffer(num_t dt , dim_t m , dim_t n , void * p , inc_t rs , inc_t cs , obj_t * obj);

! skipped the procedure using num_t
! void bli_obj_create(num_t dt , dim_t m , dim_t n , inc_t rs , inc_t cs , obj_t * obj);

! skipped the procedure using num_t
! void bli_obj_create_1x1(num_t dt , obj_t * obj);

! skipped the procedure using num_t
! void bli_obj_create_1x1_with_attached_buffer(num_t dt , void * p , obj_t * obj);

! skipped the procedure using opid_t
! void bli_cntl_mark_family(opid_t family , cntl_t * cntl);

! skipped the procedure using FILE
! void bli_sfprintm(FILE * file , const char * s1 , dim_t m , dim_t n , const float * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_dfprintm(FILE * file , const char * s1 , dim_t m , dim_t n , const double * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_zfprintm(FILE * file , const char * s1 , dim_t m , dim_t n , const dcomplex * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_ifprintm(FILE * file , const char * s1 , dim_t m , dim_t n , const gint_t * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_cfprintm(FILE * file , const char * s1 , dim_t m , dim_t n , const scomplex * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_sfprintv(FILE * file , const char * s1 , dim_t n , const float * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_dfprintv(FILE * file , const char * s1 , dim_t n , const double * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_zfprintv(FILE * file , const char * s1 , dim_t n , const dcomplex * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_ifprintv(FILE * file , const char * s1 , dim_t n , const gint_t * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_cfprintv(FILE * file , const char * s1 , dim_t n , const scomplex * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_fprintv(FILE * file , const char * s1 , const obj_t * x , const char * format , const char * s2);

! skipped the procedure using FILE
! void bli_fprintm(FILE * file , const char * s1 , const obj_t * x , const char * format , const char * s2);

! skipped the procedure using void
! void bli_sgetijv(dim_t i , const void * b , inc_t incx , double * ar , double * ai);

! skipped the procedure using void
! void bli_dgetijv(dim_t i , const void * b , inc_t incx , double * ar , double * ai);

! skipped the procedure using void
! void bli_cgetijv(dim_t i , const void * b , inc_t incx , double * ar , double * ai);

! skipped the procedure using void
! void bli_zgetijv(dim_t i , const void * b , inc_t incx , double * ar , double * ai);

! skipped the procedure using void
! void bli_sgetijm(dim_t i , dim_t j , const void * b , inc_t rs , inc_t cs , double * ar , double * ai);

! skipped the procedure using void
! void bli_dgetijm(dim_t i , dim_t j , const void * b , inc_t rs , inc_t cs , double * ar , double * ai);

! skipped the procedure using void
! void bli_cgetijm(dim_t i , dim_t j , const void * b , inc_t rs , inc_t cs , double * ar , double * ai);

! skipped the procedure using void
! void bli_zgetijm(dim_t i , dim_t j , const void * b , inc_t rs , inc_t cs , double * ar , double * ai);

! skipped the procedure using obj_t
! void bli_acquire_mpart(dim_t i , dim_t j , dim_t m , dim_t n , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using obj_t
! void bli_acquire_mij(dim_t i , dim_t j , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using obj_t
! void bli_acquire_vi(dim_t i , const obj_t * obj , obj_t * sub_obj);

interface
! void bli_thread_set_ways(dim_t jc, dim_t pc, dim_t ic, dim_t jr, dim_t ir)
subroutine bli_thread_set_ways(jc, pc, ic, jr, ir) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: jc
  integer(dim_t), value, intent(in) :: pc
  integer(dim_t), value, intent(in) :: ic
  integer(dim_t), value, intent(in) :: jr
  integer(dim_t), value, intent(in) :: ir
end subroutine
end interface

! skipped the procedure using f77_int
! void bli_thread_set_ways_(const f77_int * jc , const f77_int * pc , const f77_int * ic , const f77_int * jr , const f77_int * ir);

! skipped the procedure using opid_t
! void bli_rntm_set_ways_for_op(opid_t l3_op , side_t side , dim_t m , dim_t n , dim_t k , rntm_t * rntm);

! skipped the procedure using char
! void bli_obj_print(const char * label , const obj_t * obj);

! skipped the procedure using machval_t
! void bli_param_map_blis_to_netlib_machval(machval_t machval , char * blas_machval);

! skipped the procedure using ind_t
! void bli_ind_enable(ind_t method);

! skipped the procedure using ind_t
! void bli_ind_disable(ind_t method);

! skipped the procedure using ind_t
! void bli_ind_enable_dt(ind_t method , num_t dt);

! skipped the procedure using ind_t
! void bli_ind_disable_dt(ind_t method , num_t dt);

! skipped the procedure using machval_t
! void bli_smachval(machval_t mval , void * v);

! skipped the procedure using machval_t
! void bli_dmachval(machval_t mval , void * v);

! skipped the procedure using machval_t
! void bli_cmachval(machval_t mval , void * v);

! skipped the procedure using machval_t
! void bli_zmachval(machval_t mval , void * v);

! skipped the procedure using machval_t
! void bli_machval(machval_t mval , obj_t * v);

interface
! void bli_sinvertv(dim_t n, float * x, inc_t incx)
subroutine bli_sinvertv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_srandv(dim_t n, float * x, inc_t incx)
subroutine bli_srandv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_srandnv(dim_t n, float * x, inc_t incx)
subroutine bli_srandnv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sinvertv_ex(dim_t n , float * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_srandv_ex(dim_t n , float * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_srandnv_ex(dim_t n , float * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sswapv(dim_t n, float * x, inc_t incx, float * y, inc_t incy)
subroutine bli_sswapv(n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sswapv_ex(dim_t n , float * x , inc_t incx , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dinvertv(dim_t n, double * x, inc_t incx)
subroutine bli_dinvertv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_drandv(dim_t n, double * x, inc_t incx)
subroutine bli_drandv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_drandnv(dim_t n, double * x, inc_t incx)
subroutine bli_drandnv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dinvertv_ex(dim_t n , double * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_drandv_ex(dim_t n , double * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_drandnv_ex(dim_t n , double * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dswapv(dim_t n, double * x, inc_t incx, double * y, inc_t incy)
subroutine bli_dswapv(n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dswapv_ex(dim_t n , double * x , inc_t incx , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zinvertv(dim_t n, dcomplex * x, inc_t incx)
subroutine bli_zinvertv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_zrandv(dim_t n, dcomplex * x, inc_t incx)
subroutine bli_zrandv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_zrandnv(dim_t n, dcomplex * x, inc_t incx)
subroutine bli_zrandnv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zinvertv_ex(dim_t n , dcomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zrandv_ex(dim_t n , dcomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zrandnv_ex(dim_t n , dcomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zswapv(dim_t n, dcomplex * x, inc_t incx, dcomplex * y, inc_t incy)
subroutine bli_zswapv(n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zswapv_ex(dim_t n , dcomplex * x , inc_t incx , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cinvertv(dim_t n, scomplex * x, inc_t incx)
subroutine bli_cinvertv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_crandv(dim_t n, scomplex * x, inc_t incx)
subroutine bli_crandv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_crandnv(dim_t n, scomplex * x, inc_t incx)
subroutine bli_crandnv(n, x, incx) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cinvertv_ex(dim_t n , scomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_crandv_ex(dim_t n , scomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_crandnv_ex(dim_t n , scomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cswapv(dim_t n, scomplex * x, inc_t incx, scomplex * y, inc_t incy)
subroutine bli_cswapv(n, x, incx, y, incy) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cswapv_ex(dim_t n , scomplex * x , inc_t incx , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sasumv(dim_t n, const float * x, inc_t incx, float * asum)
subroutine bli_sasumv(n, x, incx, asum) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: asum
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sasumv_ex(dim_t n , const float * x , inc_t incx , float * asum , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_samaxv(dim_t n, const float * x, inc_t incx, dim_t * index)
subroutine bli_samaxv(n, x, incx, index) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  integer(dim_t), dimension(*), intent(inout) :: index
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_samaxv_ex(dim_t n , const float * x , inc_t incx , dim_t * index , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_snorm1v(dim_t n, const float * x, inc_t incx, float * norm)
subroutine bli_snorm1v(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_snormfv(dim_t n, const float * x, inc_t incx, float * norm)
subroutine bli_snormfv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_snormiv(dim_t n, const float * x, inc_t incx, float * norm)
subroutine bli_snormiv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_snorm1v_ex(dim_t n , const float * x , inc_t incx , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_snormfv_ex(dim_t n , const float * x , inc_t incx , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_snormiv_ex(dim_t n , const float * x , inc_t incx , float * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ssumsqv(dim_t n, const float * x, inc_t incx, float * scale, float * sumsq)
subroutine bli_ssumsqv(n, x, incx, scale, sumsq) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: scale
  real(c_float), dimension(*), intent(inout) :: sumsq
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ssumsqv_ex(dim_t n , const float * x , inc_t incx , float * scale , float * sumsq , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dasumv(dim_t n, const double * x, inc_t incx, double * asum)
subroutine bli_dasumv(n, x, incx, asum) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: asum
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dasumv_ex(dim_t n , const double * x , inc_t incx , double * asum , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_damaxv(dim_t n, const double * x, inc_t incx, dim_t * index)
subroutine bli_damaxv(n, x, incx, index) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  integer(dim_t), dimension(*), intent(inout) :: index
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_damaxv_ex(dim_t n , const double * x , inc_t incx , dim_t * index , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dnorm1v(dim_t n, const double * x, inc_t incx, double * norm)
subroutine bli_dnorm1v(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_dnormfv(dim_t n, const double * x, inc_t incx, double * norm)
subroutine bli_dnormfv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_dnormiv(dim_t n, const double * x, inc_t incx, double * norm)
subroutine bli_dnormiv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dnorm1v_ex(dim_t n , const double * x , inc_t incx , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dnormfv_ex(dim_t n , const double * x , inc_t incx , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dnormiv_ex(dim_t n , const double * x , inc_t incx , double * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dsumsqv(dim_t n, const double * x, inc_t incx, double * scale, double * sumsq)
subroutine bli_dsumsqv(n, x, incx, scale, sumsq) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: scale
  real(c_double), dimension(*), intent(inout) :: sumsq
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dsumsqv_ex(dim_t n , const double * x , inc_t incx , double * scale , double * sumsq , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zasumv(dim_t n, const dcomplex * x, inc_t incx, double * asum)
subroutine bli_zasumv(n, x, incx, asum) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: asum
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zasumv_ex(dim_t n , const dcomplex * x , inc_t incx , double * asum , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zamaxv(dim_t n, const dcomplex * x, inc_t incx, dim_t * index)
subroutine bli_zamaxv(n, x, incx, index) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  integer(dim_t), dimension(*), intent(inout) :: index
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zamaxv_ex(dim_t n , const dcomplex * x , inc_t incx , dim_t * index , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_znorm1v(dim_t n, const dcomplex * x, inc_t incx, double * norm)
subroutine bli_znorm1v(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_znormfv(dim_t n, const dcomplex * x, inc_t incx, double * norm)
subroutine bli_znormfv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_znormiv(dim_t n, const dcomplex * x, inc_t incx, double * norm)
subroutine bli_znormiv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_znorm1v_ex(dim_t n , const dcomplex * x , inc_t incx , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_znormfv_ex(dim_t n , const dcomplex * x , inc_t incx , double * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_znormiv_ex(dim_t n , const dcomplex * x , inc_t incx , double * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zsumsqv(dim_t n, const dcomplex * x, inc_t incx, double * scale, double * sumsq)
subroutine bli_zsumsqv(n, x, incx, scale, sumsq) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: scale
  real(c_double), dimension(*), intent(inout) :: sumsq
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zsumsqv_ex(dim_t n , const dcomplex * x , inc_t incx , double * scale , double * sumsq , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_casumv(dim_t n, const scomplex * x, inc_t incx, float * asum)
subroutine bli_casumv(n, x, incx, asum) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: asum
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_casumv_ex(dim_t n , const scomplex * x , inc_t incx , float * asum , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_camaxv(dim_t n, const scomplex * x, inc_t incx, dim_t * index)
subroutine bli_camaxv(n, x, incx, index) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  integer(dim_t), dimension(*), intent(inout) :: index
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_camaxv_ex(dim_t n , const scomplex * x , inc_t incx , dim_t * index , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cnorm1v(dim_t n, const scomplex * x, inc_t incx, float * norm)
subroutine bli_cnorm1v(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_cnormfv(dim_t n, const scomplex * x, inc_t incx, float * norm)
subroutine bli_cnormfv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

interface
! void bli_cnormiv(dim_t n, const scomplex * x, inc_t incx, float * norm)
subroutine bli_cnormiv(n, x, incx, norm) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: norm
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cnorm1v_ex(dim_t n , const scomplex * x , inc_t incx , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cnormfv_ex(dim_t n , const scomplex * x , inc_t incx , float * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cnormiv_ex(dim_t n , const scomplex * x , inc_t incx , float * norm , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_csumsqv(dim_t n, const scomplex * x, inc_t incx, float * scale, float * sumsq)
subroutine bli_csumsqv(n, x, incx, scale, sumsq) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: n
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: scale
  real(c_float), dimension(*), intent(inout) :: sumsq
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_csumsqv_ex(dim_t n , const scomplex * x , inc_t incx , float * scale , float * sumsq , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using errlev_t
! void bli_error_checking_level_set(errlev_t new_level);

! skipped the procedure using f77_int
! void bli_thread_set_num_threads_(const f77_int * nt);

! skipped the procedure using obj_t
! void bli_obj_free(obj_t * obj);

! skipped the procedure using bli_pthread_once_t
! void bli_pthread_once(bli_pthread_once_t * once , void ( * init ) ( void ));

! skipped the procedure using opid_t
! void bli_ind_oper_enable_only(opid_t oper , ind_t method , num_t dt);

! skipped the procedure using getopt_t
! void bli_getopt_init_state(int opterr , getopt_t * state);

! skipped the procedure using void
! void bli_free_user(void * p);

! skipped the procedure using void
! void bli_obj_attach_buffer(void * p , inc_t rs , inc_t cs , inc_t is , obj_t * obj);

interface
! void bli_pack_set_pack_a(_Bool pack_a)
subroutine bli_pack_set_pack_a(pack_a) bind(c)
    use blis_kinds
  logical(c_bool), value, intent(in) :: pack_a
end subroutine
end interface

interface
! void bli_pack_get_pack_a(_Bool * pack_a)
subroutine bli_pack_get_pack_a(pack_a) bind(c)
    use blis_kinds
  logical(c_bool), dimension(*), intent(inout) :: pack_a
end subroutine
end interface

interface
! void bli_pack_set_pack_b(_Bool pack_b)
subroutine bli_pack_set_pack_b(pack_b) bind(c)
    use blis_kinds
  logical(c_bool), value, intent(in) :: pack_b
end subroutine
end interface

interface
! void bli_pack_get_pack_b(_Bool * pack_b)
subroutine bli_pack_get_pack_b(pack_b) bind(c)
    use blis_kinds
  logical(c_bool), dimension(*), intent(inout) :: pack_b
end subroutine
end interface

! skipped the procedure using subpart_t
! void bli_acquire_mpart_t2b(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using subpart_t
! void bli_acquire_mpart_b2t(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using subpart_t
! void bli_acquire_mpart_l2r(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using subpart_t
! void bli_acquire_mpart_r2l(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using subpart_t
! void bli_acquire_mpart_tl2br(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using subpart_t
! void bli_acquire_mpart_br2tl(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using subpart_t
! void bli_acquire_vpart_f2b(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using subpart_t
! void bli_acquire_vpart_b2f(subpart_t req_part , dim_t i , dim_t b , const obj_t * obj , obj_t * sub_obj);

! skipped the procedure using rntm_t
! void bli_rntm_init_from_global(rntm_t * rntm);

! skipped the procedure using rntm_t
! void bli_cntl_free_node(rntm_t * rntm , cntl_t * cntl);

! skipped the procedure using rntm_t
! void bli_cntl_free_wo_thrinfo(rntm_t * rntm , cntl_t * cntl);

! skipped the procedure using rntm_t
! void bli_cntl_free(rntm_t * rntm , cntl_t * cntl , thrinfo_t * thread);

! skipped the procedure using rntm_t
! void bli_cntl_free_w_thrinfo(rntm_t * rntm , cntl_t * cntl , thrinfo_t * thread);

! skipped the procedure using obj_t
! void bli_obj_alloc_buffer(inc_t rs , inc_t cs , inc_t is , obj_t * obj);

! skipped the procedure using obj_t
! void bli_obj_create_conf_to(const obj_t * s , obj_t * d);

! skipped the procedure using char
! void bli_sprintm(const char * s1 , dim_t m , dim_t n , const void * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using char
! void bli_dprintm(const char * s1 , dim_t m , dim_t n , const void * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using char
! void bli_cprintm(const char * s1 , dim_t m , dim_t n , const void * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using char
! void bli_zprintm(const char * s1 , dim_t m , dim_t n , const void * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using char
! void bli_iprintm(const char * s1 , dim_t m , dim_t n , const void * x , inc_t rs_x , inc_t cs_x , const char * format , const char * s2);

! skipped the procedure using char
! void bli_sprintv(const char * s1 , dim_t n , const void * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using char
! void bli_dprintv(const char * s1 , dim_t n , const void * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using char
! void bli_cprintv(const char * s1 , dim_t n , const void * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using char
! void bli_zprintv(const char * s1 , dim_t n , const void * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using char
! void bli_iprintv(const char * s1 , dim_t n , const void * x , inc_t incx , const char * format , const char * s2);

! skipped the procedure using char
! void bli_printv(const char * s1 , const obj_t * x , const char * format , const char * s2);

! skipped the procedure using char
! void bli_printm(const char * s1 , const obj_t * x , const char * format , const char * s2);

interface
! void bli_sleep(unsigned int secs)
subroutine bli_sleep(secs) bind(c)
    use blis_kinds
  integer(c_int), value, intent(in) :: secs
end subroutine
end interface

! skipped the procedure using char
! void bli_param_map_char_to_blis_side(char side , side_t * blis_side);

! skipped the procedure using obj_t
! void bli_trmm(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b);

! skipped the procedure using obj_t
! void bli_trsm(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b);

! skipped the procedure using obj_t
! void bli_hemm(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_symm(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_trmm3(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c);

! skipped the procedure using obj_t
! void bli_hemm_ex(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_symm_ex(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_trmm3_ex(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const obj_t * beta , const obj_t * c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_trmm_ex(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_trsm_ex(side_t side , const obj_t * alpha , const obj_t * a , const obj_t * b , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using char
! void bli_param_map_blis_to_netlib_side(side_t side , char * blas_side);

interface
! void bli_shemm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * b, inc_t rs_b, inc_t cs_b, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_shemm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_ssymm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * b, inc_t rs_b, inc_t cs_b, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_ssymm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_shemm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * b , inc_t rs_b , inc_t cs_b , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssymm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * b , inc_t rs_b , inc_t cs_b , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dhemm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * b, inc_t rs_b, inc_t cs_b, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dhemm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_dsymm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * b, inc_t rs_b, inc_t cs_b, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dsymm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dhemm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * b , inc_t rs_b , inc_t cs_b , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsymm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * b , inc_t rs_b , inc_t cs_b , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zhemm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * b, inc_t rs_b, inc_t cs_b, const dcomplex * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zhemm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_zsymm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * b, inc_t rs_b, inc_t cs_b, const dcomplex * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zsymm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zhemm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * b , inc_t rs_b , inc_t cs_b , const dcomplex * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsymm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * b , inc_t rs_b , inc_t cs_b , const dcomplex * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_chemm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * b, inc_t rs_b, inc_t cs_b, const scomplex * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_chemm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_csymm(side_t side, uplo_t uploa, conj_t conja, trans_t transb, dim_t m, dim_t n, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * b, inc_t rs_b, inc_t cs_b, const scomplex * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_csymm(side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_chemm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * b , inc_t rs_b , inc_t cs_b , const scomplex * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csymm_ex(side_t side , uplo_t uploa , conj_t conja , trans_t transb , dim_t m , dim_t n , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * b , inc_t rs_b , inc_t cs_b , const scomplex * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_strmm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, float * b, inc_t rs_b, inc_t cs_b)
subroutine bli_strmm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

interface
! void bli_strsm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, float * b, inc_t rs_b, inc_t cs_b)
subroutine bli_strsm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_strmm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , float * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_strsm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , float * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dtrmm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, double * b, inc_t rs_b, inc_t cs_b)
subroutine bli_dtrmm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

interface
! void bli_dtrsm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, double * b, inc_t rs_b, inc_t cs_b)
subroutine bli_dtrsm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dtrmm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , double * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dtrsm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , double * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ztrmm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, dcomplex * b, inc_t rs_b, inc_t cs_b)
subroutine bli_ztrmm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

interface
! void bli_ztrsm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, dcomplex * b, inc_t rs_b, inc_t cs_b)
subroutine bli_ztrsm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ztrmm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , dcomplex * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ztrsm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , dcomplex * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ctrmm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, scomplex * b, inc_t rs_b, inc_t cs_b)
subroutine bli_ctrmm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

interface
! void bli_ctrsm(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, dim_t n, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, scomplex * b, inc_t rs_b, inc_t cs_b)
subroutine bli_ctrsm(side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(inout) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ctrmm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , scomplex * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ctrsm_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , dim_t n , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , scomplex * b , inc_t rs_b , inc_t cs_b , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_strmm3(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, trans_t transb, dim_t m, dim_t n, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * b, inc_t rs_b, inc_t cs_b, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_strmm3(side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_strmm3_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , trans_t transb , dim_t m , dim_t n , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * b , inc_t rs_b , inc_t cs_b , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dtrmm3(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, trans_t transb, dim_t m, dim_t n, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * b, inc_t rs_b, inc_t cs_b, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dtrmm3(side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dtrmm3_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , trans_t transb , dim_t m , dim_t n , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * b , inc_t rs_b , inc_t cs_b , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ztrmm3(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, trans_t transb, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * b, inc_t rs_b, inc_t cs_b, const dcomplex * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_ztrmm3(side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ztrmm3_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , trans_t transb , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * b , inc_t rs_b , inc_t cs_b , const dcomplex * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ctrmm3(side_t side, uplo_t uploa, trans_t transa, diag_t diaga, trans_t transb, dim_t m, dim_t n, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * b, inc_t rs_b, inc_t cs_b, const scomplex * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_ctrmm3(side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(side_t), value, intent(in) :: side
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ctrmm3_ex(side_t side , uplo_t uploa , trans_t transa , diag_t diaga , trans_t transb , dim_t m , dim_t n , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * b , inc_t rs_b , inc_t cs_b , const scomplex * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using thrinfo_t
! void bli_thread_range_sub(const thrinfo_t * thread , dim_t n , dim_t bf , _Bool handle_edge_low , dim_t * start , dim_t * end);

! skipped the procedure using thrcomm_t
! void bli_thrcomm_barrier(dim_t thread_id , thrcomm_t * comm);

! skipped the procedure using char
! void bli_param_map_char_to_blis_trans(char trans , trans_t * blis_trans);

! skipped the procedure using char
! void bli_param_map_blis_to_netlib_trans(trans_t trans , char * blas_trans);

interface
! void bli_sgemv(trans_t transa, conj_t conjx, dim_t m, dim_t n, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * x, inc_t incx, const float * beta, float * y, inc_t incy)
subroutine bli_sgemv(transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sgemv_ex(trans_t transa , conj_t conjx , dim_t m , dim_t n , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * x , inc_t incx , const float * beta , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dgemv(trans_t transa, conj_t conjx, dim_t m, dim_t n, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * x, inc_t incx, const double * beta, double * y, inc_t incy)
subroutine bli_dgemv(transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dgemv_ex(trans_t transa , conj_t conjx , dim_t m , dim_t n , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * x , inc_t incx , const double * beta , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zgemv(trans_t transa, conj_t conjx, dim_t m, dim_t n, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * x, inc_t incx, const dcomplex * beta, dcomplex * y, inc_t incy)
subroutine bli_zgemv(transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zgemv_ex(trans_t transa , conj_t conjx , dim_t m , dim_t n , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * x , inc_t incx , const dcomplex * beta , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cgemv(trans_t transa, conj_t conjx, dim_t m, dim_t n, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * x, inc_t incx, const scomplex * beta, scomplex * y, inc_t incy)
subroutine bli_cgemv(transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cgemv_ex(trans_t transa , conj_t conjx , dim_t m , dim_t n , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * x , inc_t incx , const scomplex * beta , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using void
! void bli_sscastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_ddcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_cccastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zzcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_sdcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_sccastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_szcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_dscastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_dccastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_dzcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_cscastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_cdcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_czcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zscastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zdcastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zccastm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_sscastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_ddcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_cccastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zzcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_sdcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_sccastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_szcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_dscastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_dccastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_dzcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_cscastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_cdcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_czcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zscastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zdcastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

! skipped the procedure using void
! void bli_zccastnzm(trans_t transa , dim_t m , dim_t n , const void * a , inc_t rs_a , inc_t cs_a , void * b , inc_t rs_b , inc_t cs_b);

interface
! void bli_sgemm(trans_t transa, trans_t transb, dim_t m, dim_t n, dim_t k, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * b, inc_t rs_b, inc_t cs_b, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_sgemm(transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  integer(dim_t), value, intent(in) :: k
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sgemm_ex(trans_t transa , trans_t transb , dim_t m , dim_t n , dim_t k , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * b , inc_t rs_b , inc_t cs_b , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dgemm(trans_t transa, trans_t transb, dim_t m, dim_t n, dim_t k, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * b, inc_t rs_b, inc_t cs_b, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dgemm(transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  integer(dim_t), value, intent(in) :: k
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dgemm_ex(trans_t transa , trans_t transb , dim_t m , dim_t n , dim_t k , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * b , inc_t rs_b , inc_t cs_b , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zgemm(trans_t transa, trans_t transb, dim_t m, dim_t n, dim_t k, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * b, inc_t rs_b, inc_t cs_b, const dcomplex * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zgemm(transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  integer(dim_t), value, intent(in) :: k
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zgemm_ex(trans_t transa , trans_t transb , dim_t m , dim_t n , dim_t k , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * b , inc_t rs_b , inc_t cs_b , const dcomplex * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cgemm(trans_t transa, trans_t transb, dim_t m, dim_t n, dim_t k, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * b, inc_t rs_b, inc_t cs_b, const scomplex * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_cgemm(transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: n
  integer(dim_t), value, intent(in) :: k
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cgemm_ex(trans_t transa , trans_t transb , dim_t m , dim_t n , dim_t k , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * b , inc_t rs_b , inc_t cs_b , const scomplex * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using char
! void bli_param_map_char_to_blis_uplo(char uplo , uplo_t * blis_uplo);

! skipped the procedure using char
! void bli_param_map_blis_to_netlib_uplo(uplo_t uplo , char * blas_uplo);

interface
! void bli_shemv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * x, inc_t incx, const float * beta, float * y, inc_t incy)
subroutine bli_shemv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_ssymv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * x, inc_t incx, const float * beta, float * y, inc_t incy)
subroutine bli_ssymv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_shemv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * x , inc_t incx , const float * beta , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssymv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * x , inc_t incx , const float * beta , float * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dhemv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * x, inc_t incx, const double * beta, double * y, inc_t incy)
subroutine bli_dhemv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_dsymv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * x, inc_t incx, const double * beta, double * y, inc_t incy)
subroutine bli_dsymv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dhemv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * x , inc_t incx , const double * beta , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsymv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * x , inc_t incx , const double * beta , double * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zhemv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * x, inc_t incx, const dcomplex * beta, dcomplex * y, inc_t incy)
subroutine bli_zhemv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_zsymv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * x, inc_t incx, const dcomplex * beta, dcomplex * y, inc_t incy)
subroutine bli_zsymv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zhemv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * x , inc_t incx , const dcomplex * beta , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsymv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * x , inc_t incx , const dcomplex * beta , dcomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_chemv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * x, inc_t incx, const scomplex * beta, scomplex * y, inc_t incy)
subroutine bli_chemv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

interface
! void bli_csymv(uplo_t uploa, conj_t conja, conj_t conjx, dim_t m, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * x, inc_t incx, const scomplex * beta, scomplex * y, inc_t incy)
subroutine bli_csymv(uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conja
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: y
  integer(inc_t), value, intent(in) :: incy
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_chemv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * x , inc_t incx , const scomplex * beta , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csymv_ex(uplo_t uploa , conj_t conja , conj_t conjx , dim_t m , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * x , inc_t incx , const scomplex * beta , scomplex * y , inc_t incy , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sher2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const float * alpha, const float * x, inc_t incx, const float * y, inc_t incy, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_sher2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_ssyr2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const float * alpha, const float * x, inc_t incx, const float * y, inc_t incy, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_ssyr2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sher2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const float * alpha , const float * x , inc_t incx , const float * y , inc_t incy , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssyr2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const float * alpha , const float * x , inc_t incx , const float * y , inc_t incy , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dher2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const double * alpha, const double * x, inc_t incx, const double * y, inc_t incy, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dher2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_dsyr2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const double * alpha, const double * x, inc_t incx, const double * y, inc_t incy, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dsyr2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dher2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const double * alpha , const double * x , inc_t incx , const double * y , inc_t incy , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsyr2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const double * alpha , const double * x , inc_t incx , const double * y , inc_t incy , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zher2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const dcomplex * alpha, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zher2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_zsyr2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const dcomplex * alpha, const dcomplex * x, inc_t incx, const dcomplex * y, inc_t incy, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zsyr2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zher2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const dcomplex * alpha , const dcomplex * x , inc_t incx , const dcomplex * y , inc_t incy , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsyr2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const dcomplex * alpha , const dcomplex * x , inc_t incx , const dcomplex * y , inc_t incy , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cher2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const scomplex * alpha, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_cher2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_csyr2(uplo_t uploa, conj_t conjx, conj_t conjy, dim_t m, const scomplex * alpha, const scomplex * x, inc_t incx, const scomplex * y, inc_t incy, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_csyr2(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(conj_t), value, intent(in) :: conjy
  integer(dim_t), value, intent(in) :: m
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(in) :: y
  integer(inc_t), value, intent(in) :: incy
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cher2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const scomplex * alpha , const scomplex * x , inc_t incx , const scomplex * y , inc_t incy , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csyr2_ex(uplo_t uploa , conj_t conjx , conj_t conjy , dim_t m , const scomplex * alpha , const scomplex * x , inc_t incx , const scomplex * y , inc_t incy , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sher(uplo_t uploa, conj_t conjx, dim_t m, const float * alpha, const float * x, inc_t incx, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_sher(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_ssyr(uplo_t uploa, conj_t conjx, dim_t m, const float * alpha, const float * x, inc_t incx, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_ssyr(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sher_ex(uplo_t uploa , conj_t conjx , dim_t m , const float * alpha , const float * x , inc_t incx , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssyr_ex(uplo_t uploa , conj_t conjx , dim_t m , const float * alpha , const float * x , inc_t incx , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cher(uplo_t uploa, conj_t conjx, dim_t m, const float * alpha, const scomplex * x, inc_t incx, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_cher(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cher_ex(uplo_t uploa , conj_t conjx , dim_t m , const float * alpha , const scomplex * x , inc_t incx , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dher(uplo_t uploa, conj_t conjx, dim_t m, const double * alpha, const double * x, inc_t incx, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dher(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_dsyr(uplo_t uploa, conj_t conjx, dim_t m, const double * alpha, const double * x, inc_t incx, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dsyr(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dher_ex(uplo_t uploa , conj_t conjx , dim_t m , const double * alpha , const double * x , inc_t incx , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsyr_ex(uplo_t uploa , conj_t conjx , dim_t m , const double * alpha , const double * x , inc_t incx , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zher(uplo_t uploa, conj_t conjx, dim_t m, const double * alpha, const dcomplex * x, inc_t incx, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zher(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zher_ex(uplo_t uploa , conj_t conjx , dim_t m , const double * alpha , const dcomplex * x , inc_t incx , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zsyr(uplo_t uploa, conj_t conjx, dim_t m, const dcomplex * alpha, const dcomplex * x, inc_t incx, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zsyr(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zsyr_ex(uplo_t uploa , conj_t conjx , dim_t m , const dcomplex * alpha , const dcomplex * x , inc_t incx , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_csyr(uplo_t uploa, conj_t conjx, dim_t m, const scomplex * alpha, const scomplex * x, inc_t incx, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_csyr(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(conj_t), value, intent(in) :: conjx
  integer(dim_t), value, intent(in) :: m
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: x
  integer(inc_t), value, intent(in) :: incx
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_csyr_ex(uplo_t uploa , conj_t conjx , dim_t m , const scomplex * alpha , const scomplex * x , inc_t incx , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_smkherm(uplo_t uploa, dim_t m, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_smkherm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_smksymm(uplo_t uploa, dim_t m, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_smksymm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_smktrim(uplo_t uploa, dim_t m, float * a, inc_t rs_a, inc_t cs_a)
subroutine bli_smktrim(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  real(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_smkherm_ex(uplo_t uploa , dim_t m , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_smksymm_ex(uplo_t uploa , dim_t m , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_smktrim_ex(uplo_t uploa , dim_t m , float * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dmkherm(uplo_t uploa, dim_t m, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dmkherm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_dmksymm(uplo_t uploa, dim_t m, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dmksymm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_dmktrim(uplo_t uploa, dim_t m, double * a, inc_t rs_a, inc_t cs_a)
subroutine bli_dmktrim(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  real(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dmkherm_ex(uplo_t uploa , dim_t m , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dmksymm_ex(uplo_t uploa , dim_t m , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dmktrim_ex(uplo_t uploa , dim_t m , double * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zmkherm(uplo_t uploa, dim_t m, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zmkherm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_zmksymm(uplo_t uploa, dim_t m, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zmksymm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_zmktrim(uplo_t uploa, dim_t m, dcomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_zmktrim(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  complex(c_double), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zmkherm_ex(uplo_t uploa , dim_t m , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zmksymm_ex(uplo_t uploa , dim_t m , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zmktrim_ex(uplo_t uploa , dim_t m , dcomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cmkherm(uplo_t uploa, dim_t m, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_cmkherm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_cmksymm(uplo_t uploa, dim_t m, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_cmksymm(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

interface
! void bli_cmktrim(uplo_t uploa, dim_t m, scomplex * a, inc_t rs_a, inc_t cs_a)
subroutine bli_cmktrim(uploa, m, a, rs_a, cs_a) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(dim_t), value, intent(in) :: m
  complex(c_float), dimension(*), intent(inout) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cmkherm_ex(uplo_t uploa , dim_t m , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cmksymm_ex(uplo_t uploa , dim_t m , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_cmktrim_ex(uplo_t uploa , dim_t m , scomplex * a , inc_t rs_a , inc_t cs_a , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_strmv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, float * x, inc_t incx)
subroutine bli_strmv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_strsv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, float * x, inc_t incx)
subroutine bli_strsv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_strmv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , float * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_strsv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , float * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dtrmv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, double * x, inc_t incx)
subroutine bli_dtrmv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_dtrsv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, double * x, inc_t incx)
subroutine bli_dtrsv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dtrmv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , double * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dtrsv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , double * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ztrmv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, dcomplex * x, inc_t incx)
subroutine bli_ztrmv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_ztrsv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, dcomplex * x, inc_t incx)
subroutine bli_ztrsv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ztrmv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , dcomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ztrsv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , dcomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ctrmv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, scomplex * x, inc_t incx)
subroutine bli_ctrmv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

interface
! void bli_ctrsv(uplo_t uploa, trans_t transa, diag_t diaga, dim_t m, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, scomplex * x, inc_t incx)
subroutine bli_ctrsv(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploa
  integer(trans_t), value, intent(in) :: transa
  integer(diag_t), value, intent(in) :: diaga
  integer(dim_t), value, intent(in) :: m
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(inout) :: x
  integer(inc_t), value, intent(in) :: incx
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_ctrmv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , scomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ctrsv_ex(uplo_t uploa , trans_t transa , diag_t diaga , dim_t m , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , scomplex * x , inc_t incx , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sherk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_sherk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_ssyrk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_ssyrk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sherk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssyrk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cherk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const float * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const float * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_cherk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cherk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const float * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const float * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dherk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dherk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_dsyrk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dsyrk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dherk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsyrk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zherk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const double * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const double * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zherk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zherk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const double * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const double * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zsyrk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zsyrk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zsyrk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_csyrk(uplo_t uploc, trans_t transa, dim_t m, dim_t k, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_csyrk(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_csyrk_ex(uplo_t uploc , trans_t transa , dim_t m , dim_t k , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_sher2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * b, inc_t rs_b, inc_t cs_b, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_sher2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_sgemmt(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * b, inc_t rs_b, inc_t cs_b, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_sgemmt(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_ssyr2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const float * alpha, const float * a, inc_t rs_a, inc_t cs_a, const float * b, inc_t rs_b, inc_t cs_b, const float * beta, float * c, inc_t rs_c, inc_t cs_c)
subroutine bli_ssyr2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_float), intent(in) :: alpha
  real(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  real(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_sher2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * b , inc_t rs_b , inc_t cs_b , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_sgemmt_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * b , inc_t rs_b , inc_t cs_b , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_ssyr2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const float * alpha , const float * a , inc_t rs_a , inc_t cs_a , const float * b , inc_t rs_b , inc_t cs_b , const float * beta , float * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_dher2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * b, inc_t rs_b, inc_t cs_b, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dher2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_dgemmt(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * b, inc_t rs_b, inc_t cs_b, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dgemmt(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_dsyr2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const double * alpha, const double * a, inc_t rs_a, inc_t cs_a, const double * b, inc_t rs_b, inc_t cs_b, const double * beta, double * c, inc_t rs_c, inc_t cs_c)
subroutine bli_dsyr2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  real(c_double), intent(in) :: alpha
  real(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  real(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  real(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_dher2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * b , inc_t rs_b , inc_t cs_b , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dgemmt_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * b , inc_t rs_b , inc_t cs_b , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_dsyr2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const double * alpha , const double * a , inc_t rs_a , inc_t cs_a , const double * b , inc_t rs_b , inc_t cs_b , const double * beta , double * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zher2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * b, inc_t rs_b, inc_t cs_b, const double * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zher2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zher2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * b , inc_t rs_b , inc_t cs_b , const double * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_zgemmt(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * b, inc_t rs_b, inc_t cs_b, const dcomplex * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zgemmt(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_zsyr2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const dcomplex * alpha, const dcomplex * a, inc_t rs_a, inc_t cs_a, const dcomplex * b, inc_t rs_b, inc_t cs_b, const dcomplex * beta, dcomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_zsyr2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_double), intent(in) :: alpha
  complex(c_double), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_double), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_double), intent(in) :: beta
  complex(c_double), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_zgemmt_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * b , inc_t rs_b , inc_t cs_b , const dcomplex * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_zsyr2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const dcomplex * alpha , const dcomplex * a , inc_t rs_a , inc_t cs_a , const dcomplex * b , inc_t rs_b , inc_t cs_b , const dcomplex * beta , dcomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cher2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * b, inc_t rs_b, inc_t cs_b, const float * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_cher2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  real(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cher2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * b , inc_t rs_b , inc_t cs_b , const float * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_cgemmt(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * b, inc_t rs_b, inc_t cs_b, const scomplex * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_cgemmt(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

interface
! void bli_csyr2k(uplo_t uploc, trans_t transa, trans_t transb, dim_t m, dim_t k, const scomplex * alpha, const scomplex * a, inc_t rs_a, inc_t cs_a, const scomplex * b, inc_t rs_b, inc_t cs_b, const scomplex * beta, scomplex * c, inc_t rs_c, inc_t cs_c)
subroutine bli_csyr2k(uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c) bind(c)
    use blis_kinds
  integer(uplo_t), value, intent(in) :: uploc
  integer(trans_t), value, intent(in) :: transa
  integer(trans_t), value, intent(in) :: transb
  integer(dim_t), value, intent(in) :: m
  integer(dim_t), value, intent(in) :: k
  complex(c_float), intent(in) :: alpha
  complex(c_float), dimension(*), intent(in) :: a
  integer(inc_t), value, intent(in) :: rs_a
  integer(inc_t), value, intent(in) :: cs_a
  complex(c_float), dimension(*), intent(in) :: b
  integer(inc_t), value, intent(in) :: rs_b
  integer(inc_t), value, intent(in) :: cs_b
  complex(c_float), intent(in) :: beta
  complex(c_float), dimension(*), intent(inout) :: c
  integer(inc_t), value, intent(in) :: rs_c
  integer(inc_t), value, intent(in) :: cs_c
end subroutine
end interface

! skipped the procedure using cntx_t
! void bli_cgemmt_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * b , inc_t rs_b , inc_t cs_b , const scomplex * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using cntx_t
! void bli_csyr2k_ex(uplo_t uploc , trans_t transa , trans_t transb , dim_t m , dim_t k , const scomplex * alpha , const scomplex * a , inc_t rs_a , inc_t cs_a , const scomplex * b , inc_t rs_b , inc_t cs_b , const scomplex * beta , scomplex * c , inc_t rs_c , inc_t cs_c , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_thread_set_num_threads(dim_t value)
subroutine bli_thread_set_num_threads(value) bind(c)
    use blis_kinds
  integer(dim_t), value, intent(in) :: value
end subroutine
end interface

! skipped the procedure using obj_t
! void bli_invertv(const obj_t * x);

! skipped the procedure using obj_t
! void bli_invertd(const obj_t * x);

! skipped the procedure using obj_t
! void bli_randv(const obj_t * x);

! skipped the procedure using obj_t
! void bli_randnv(const obj_t * x);

! skipped the procedure using obj_t
! void bli_randm(const obj_t * x);

! skipped the procedure using obj_t
! void bli_randnm(const obj_t * x);

! skipped the procedure using obj_t
! void bli_asumv(const obj_t * x , const obj_t * asum);

! skipped the procedure using obj_t
! void bli_asumv_ex(const obj_t * x , const obj_t * asum , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_xpbyv(const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_xpbyd(const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_xpbym(const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_xpbym_md(const obj_t * x , const obj_t * beta , const obj_t * y);

! skipped the procedure using obj_t
! void bli_xpbyv_ex(const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_xpbyd_ex(const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_xpbym_ex(const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_xpbym_md_ex(const obj_t * x , const obj_t * beta , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_invertv_ex(const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_invertd_ex(const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_randv_ex(const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_randnv_ex(const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_randm_ex(const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_randnm_ex(const obj_t * x , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_amaxv(const obj_t * x , const obj_t * index);

! skipped the procedure using obj_t
! void bli_amaxv_ex(const obj_t * x , const obj_t * index , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_norm1v(const obj_t * x , const obj_t * norm);

! skipped the procedure using obj_t
! void bli_normfv(const obj_t * x , const obj_t * norm);

! skipped the procedure using obj_t
! void bli_normiv(const obj_t * x , const obj_t * norm);

! skipped the procedure using obj_t
! void bli_norm1m(const obj_t * x , const obj_t * norm);

! skipped the procedure using obj_t
! void bli_normfm(const obj_t * x , const obj_t * norm);

! skipped the procedure using obj_t
! void bli_normim(const obj_t * x , const obj_t * norm);

! skipped the procedure using obj_t
! void bli_norm1v_ex(const obj_t * x , const obj_t * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_normfv_ex(const obj_t * x , const obj_t * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_normiv_ex(const obj_t * x , const obj_t * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_norm1m_ex(const obj_t * x , const obj_t * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_normfm_ex(const obj_t * x , const obj_t * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_normim_ex(const obj_t * x , const obj_t * norm , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_sumsqv(const obj_t * x , const obj_t * scale , const obj_t * sumsq);

! skipped the procedure using obj_t
! void bli_sumsqv_ex(const obj_t * x , const obj_t * scale , const obj_t * sumsq , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_castv(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_projv(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_addv(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_copyv(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_subv(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_swapv(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_addd(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_copyd(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_subd(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_addm(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
--- blis.h.pp
+++ /tmp/cocci-output-2733-1fc9db-blis.h.pp
@@ -1844,7 +1844,7 @@ int getchar(void);
 long ftell(FILE *);
 size_t fwrite(const void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream) __asm("_" "fwrite" );
 int getc(FILE *);
-int getchar(void);
+int getchar();
 char *gets(char *);
 void perror(const char *) __attribute__((__cold__));
 int putc(int, FILE *);
@@ -1859,7 +1859,7 @@ FILE *tmpfile(void);
 __attribute__((__availability__(swift, unavailable, message="Use snprintf instead.")))
 int sprintf(char * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
 int sscanf(const char * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
-FILE *tmpfile(void);
+FILE *tmpfile();
 __attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))
 char *tmpnam(char *);
 int ungetc(int, FILE *);
@@ -1923,7 +1923,7 @@ int getchar_unlocked(void);
 int ftrylockfile(FILE *);
 void funlockfile(FILE *);
 int getc_unlocked(FILE *);
-int getchar_unlocked(void);
+int getchar_unlocked();
 int putc_unlocked(int, FILE *);
 int putchar_unlocked(int);
 /* Removed in Issue 6 */
@@ -3864,7 +3864,7 @@ void abort(void) __attribute__((__cold__)) __attribute
  *
  * @APPLE_LICENSE_HEADER_END@
  */
-void abort(void) __attribute__((__cold__)) __attribute__((__noreturn__));
+void abort() __attribute__((__cold__)) __attribute__((__noreturn__));
 int abs(int) __attribute__((__const__));
 int atexit(void (* _Nonnull)(void));
 int at_quick_exit(void (*)(void));
@@ -3893,7 +3893,7 @@ int rand(void) __attribute__((__availability__(swift, 
 void qsort(void *__base, size_t __nel, size_t __width,
      int (* _Nonnull __compar)(const void *, const void *));
 void quick_exit(int) __attribute__((__noreturn__));
-int rand(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
+int rand() __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 /* realloc is now declared in _malloc.h */
 void srand(unsigned) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 double strtod(const char *, char **) __asm("_" "strtod" );
@@ -3915,7 +3915,7 @@ double drand48(void);
 int wctomb(char *, wchar_t);
 void _Exit(int) __attribute__((__noreturn__));
 long a64l(const char *);
-double drand48(void);
+double drand48();
 char *ecvt(double, int, int *restrict, int *restrict); /* LEGACY */
 double erand48(unsigned short[3]);
 char *fcvt(double, int, int *restrict, int *restrict); /* LEGACY */
@@ -3926,15 +3926,15 @@ long lrand48(void) __attribute__((__availability__(swi
 long jrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 char *l64a(long);
 void lcong48(unsigned short[7]);
-long lrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
+long lrand48() __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 char *mktemp(char *);
 int mkstemp(char *);
-long mrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
+long mrand48() __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 long nrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 int posix_openpt(int);
 char *ptsname(int);
 int putenv(char *) __asm("_" "putenv" );
-long random(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
+long random() __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 int rand_r(unsigned *) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
 char *realpath(const char * restrict, char * restrict) __asm("_" "realpath" );
 unsigned short
@@ -3984,7 +3984,7 @@ extern int __math_errhandling(void);
     significantly more costly than separate multiply and add operations.      */
 /* The values returned by `ilogb' for 0 and NaN respectively. */
 /* Bitmasks for the math_errhandling macro.  */
-extern int __math_errhandling(void);
+extern int __math_errhandling();
 /******************************************************************************
  *                                                                            *
  *                              Inquiry macros                                *
@@ -4263,13 +4263,13 @@ extern float __inff(void)
 extern double fma(double, double, double);
 extern long double fmal(long double, long double, long double);
 /* Deprecated functions; use the INFINITY and NAN macros instead.             */
-extern float __inff(void)
+extern float __inff()
 __attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="use `(float)INFINITY` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
-extern double __inf(void)
+extern double __inf()
 __attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="use `INFINITY` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
-extern long double __infl(void)
+extern long double __infl()
 __attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="use `(long double)INFINITY` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
-extern float __nan(void)
+extern float __nan()
 __attribute__((availability(macos,introduced=10.0,deprecated=10.14,message="use `NAN` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
 /******************************************************************************
  *  Reentrant variants of lgamma[fl]                                          *
@@ -4839,7 +4839,7 @@ extern int * __error(void);
  *
  *	@(#)errno.h	8.5 (Berkeley) 1/21/94
  */
-extern int * __error(void);
+extern int * __error();
 /*
  * Error codes
  */
@@ -12299,19 +12299,19 @@ uint64_t mach_absolute_time(void);
  mach_timebase_info_t info);
 kern_return_t mach_wait_until(
  uint64_t deadline);
-uint64_t mach_absolute_time(void);
+uint64_t mach_absolute_time();
 __attribute__((availability(macosx,introduced=10.10)))
-uint64_t mach_approximate_time(void);
+uint64_t mach_approximate_time();
 /*
  * like mach_absolute_time, but advances during sleep
  */
 __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
-uint64_t mach_continuous_time(void);
+uint64_t mach_continuous_time();
 /*
  * like mach_approximate_time, but advances during sleep
  */
 __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
-uint64_t mach_continuous_approximate_time(void);
+uint64_t mach_continuous_approximate_time();
 // end bli_system.h
 // begin bli_lang_defs.h
 // -- Undefine restrict for C++ and C89/90 --
@@ -13015,7 +13015,7 @@ extern int sched_yield(void);
  * Scheduling paramters
  */
 struct sched_param { int sched_priority; char __opaque[4]; };
-extern int sched_yield(void);
+extern int sched_yield();
 extern int sched_get_priority_min(int);
 extern int sched_get_priority_max(int);
 /*
@@ -13301,7 +13301,7 @@ clock_t clock(void) __asm("_" "clock" );
 extern long timezone __asm("_" "timezone" );
 extern int daylight;
 char *asctime(const struct tm *);
-clock_t clock(void) __asm("_" "clock" );
+clock_t clock() __asm("_" "clock" );
 char *ctime(const time_t *);
 double difftime(time_t, time_t);
 struct tm *getdate(const char *);
@@ -13311,7 +13311,7 @@ void tzset(void);
 size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
 char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
 time_t time(time_t *);
-void tzset(void);
+void tzset();
 /* [TSF] Thread safe functions */
 char *asctime_r(const struct tm * restrict, char * restrict);
 char *ctime_r(const time_t *, char *);
@@ -13760,7 +13760,7 @@ int pthread_getconcurrency(void);
 __attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Thread lifecycle is owned by Swift Concurrency runtime" "\")")))
 void pthread_exit(void * _Nullable) __attribute__((__noreturn__));
 __attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
-int pthread_getconcurrency(void);
+int pthread_getconcurrency();
 __attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
 int pthread_getschedparam(pthread_t , int * _Nullable restrict,
   struct sched_param * _Nullable restrict);
@@ -13858,7 +13858,7 @@ pthread_t pthread_self(void);
 __attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
 int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);
 __attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
-pthread_t pthread_self(void);
+pthread_t pthread_self();
 __attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
 __attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
 int pthread_setcancelstate(int , int * _Nullable)
@@ -13876,7 +13876,7 @@ void pthread_testcancel(void) __asm("_" "pthread_testc
 int pthread_setspecific(pthread_key_t , const void * _Nullable);
 __attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
 __attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
-void pthread_testcancel(void) __asm("_" "pthread_testcancel" );
+void pthread_testcancel() __asm("_" "pthread_testcancel" );
 #pragma clang assume_nonnull end
 
 // This branch defines a pthreads-like API, bli_pthreads_*(), and implements it
@@ -19082,8 +19082,8 @@ void bli_thread_init( void );
 // end bli_l3_sup_decor_pthreads.h
 // end bli_l3_sup_decor.h
 // Initialization-related prototypes.
-void bli_thread_init( void );
-void bli_thread_finalize( void );
+void bli_thread_init();
+void bli_thread_finalize();
 // Thread range-related prototypes.
 __attribute__ ((visibility ("default")))
 void bli_thread_range_sub
@@ -19175,12 +19175,12 @@ __attribute__ ((visibility ("default"))) dim_t bli_thr
 dim_t bli_lcm( dim_t x, dim_t y );
 dim_t bli_ipow( dim_t base, dim_t power );
 // -----------------------------------------------------------------------------
-__attribute__ ((visibility ("default"))) dim_t bli_thread_get_jc_nt( void );
-__attribute__ ((visibility ("default"))) dim_t bli_thread_get_pc_nt( void );
-__attribute__ ((visibility ("default"))) dim_t bli_thread_get_ic_nt( void );
-__attribute__ ((visibility ("default"))) dim_t bli_thread_get_jr_nt( void );
-__attribute__ ((visibility ("default"))) dim_t bli_thread_get_ir_nt( void );
-__attribute__ ((visibility ("default"))) dim_t bli_thread_get_num_threads( void );
+__attribute__ ((visibility ("default"))) dim_t bli_thread_get_jc_nt();
+__attribute__ ((visibility ("default"))) dim_t bli_thread_get_pc_nt();
+__attribute__ ((visibility ("default"))) dim_t bli_thread_get_ic_nt();
+__attribute__ ((visibility ("default"))) dim_t bli_thread_get_jr_nt();
+__attribute__ ((visibility ("default"))) dim_t bli_thread_get_ir_nt();
+__attribute__ ((visibility ("default"))) dim_t bli_thread_get_num_threads();
 __attribute__ ((visibility ("default"))) void bli_thread_set_ways( dim_t jc, dim_t pc, dim_t ic, dim_t jr, dim_t ir );
 __attribute__ ((visibility ("default"))) void bli_thread_set_num_threads( dim_t value );
 void bli_thread_init_rntm_from_env( rntm_t* rntm );
@@ -19743,14 +19743,14 @@ __attribute__ ((visibility ("default"))) void bli_init
 // end bli_kernel_macro_defs.h
 // -- Base operation prototypes --
 // begin bli_init.h
-__attribute__ ((visibility ("default"))) void bli_init( void );
-__attribute__ ((visibility ("default"))) void bli_finalize( void );
-void bli_init_auto( void );
-void bli_finalize_auto( void );
-void bli_init_once( void );
-void bli_finalize_once( void );
-int bli_init_apis( void );
-int bli_finalize_apis( void );
+__attribute__ ((visibility ("default"))) void bli_init();
+__attribute__ ((visibility ("default"))) void bli_finalize();
+void bli_init_auto();
+void bli_finalize_auto();
+void bli_init_once();
+void bli_finalize_once();
+int bli_init_apis();
+int bli_finalize_apis();
 // end bli_init.h
 // begin bli_malloc.h
 // Typedef function pointer types for malloc() and free() substitutes.
@@ -19771,8 +19771,8 @@ void bli_const_init( void );
 void bli_fmalloc_post_check( void* p );
 // end bli_malloc.h
 // begin bli_const.h
-void bli_const_init( void );
-void bli_const_finalize( void );
+void bli_const_init();
+void bli_const_finalize();
 // end bli_const.h
 // begin bli_obj.h
 // begin bli_obj_check.h
@@ -20760,16 +20760,16 @@ void bli_gks_init( void );
      );
 // end bli_rntm.h
 // begin bli_gks.h
-void bli_gks_init( void );
-void bli_gks_finalize( void );
-void bli_gks_init_index( void );
+void bli_gks_init();
+void bli_gks_finalize();
+void bli_gks_init_index();
 const cntx_t* bli_gks_lookup_nat_cntx( arch_t id );
 const cntx_t* bli_gks_lookup_ind_cntx( arch_t id, ind_t ind );
 const cntx_t* const * bli_gks_lookup_id( arch_t id );
 void bli_gks_register_cntx( arch_t id, void_fp nat_fp, void_fp ref_fp, void_fp ind_fp );
-__attribute__ ((visibility ("default"))) const cntx_t* bli_gks_query_cntx( void );
-__attribute__ ((visibility ("default"))) const cntx_t* bli_gks_query_nat_cntx( void );
-const cntx_t* bli_gks_query_cntx_noinit( void );
+__attribute__ ((visibility ("default"))) const cntx_t* bli_gks_query_cntx();
+__attribute__ ((visibility ("default"))) const cntx_t* bli_gks_query_nat_cntx();
+const cntx_t* bli_gks_query_cntx_noinit();
 __attribute__ ((visibility ("default"))) const cntx_t* bli_gks_query_ind_cntx( ind_t ind );
 __attribute__ ((visibility ("default"))) void bli_gks_init_ref_cntx( cntx_t* cntx );
 _Bool bli_gks_cntx_l3_nat_ukr_is_ref( num_t dt, ukr_t ukr_id, const cntx_t* cntx );
@@ -20798,11 +20798,11 @@ void bli_ind_init( void );
 _Bool bli_l3_ind_oper_get_enable( opid_t oper, ind_t method, num_t dt );
 _Bool bli_l3_ind_oper_is_impl( opid_t oper, ind_t method );
 // end bli_l3_ind.h
-void bli_ind_init( void );
-void bli_ind_finalize( void );
+void bli_ind_init();
+void bli_ind_finalize();
 __attribute__ ((visibility ("default"))) void bli_ind_enable( ind_t method );
 __attribute__ ((visibility ("default"))) void bli_ind_disable( ind_t method );
-__attribute__ ((visibility ("default"))) void bli_ind_disable_all( void );
+__attribute__ ((visibility ("default"))) void bli_ind_disable_all();
 __attribute__ ((visibility ("default"))) void bli_ind_enable_dt( ind_t method, num_t dt );
 __attribute__ ((visibility ("default"))) void bli_ind_disable_dt( ind_t method, num_t dt );
 __attribute__ ((visibility ("default"))) void bli_ind_disable_all_dt( num_t dt );
@@ -20864,15 +20864,13 @@ __attribute__ ((visibility ("default"))) pba_t* bli_pb
  bli_pthread_mutex_unlock( &(pba->mutex) );
 }
 // -----------------------------------------------------------------------------
-__attribute__ ((visibility ("default"))) pba_t* bli_pba_query( void );
+__attribute__ ((visibility ("default"))) pba_t* bli_pba_query();
 void bli_pba_init
      (
        const cntx_t* cntx
      );
 void bli_pba_finalize
-     (
-       void
-     );
+     ();
 void bli_pba_acquire_m
      (
        rntm_t* rntm,
@@ -21220,10 +21218,10 @@ apool_t* bli_sba_query( void );
      );
 // end bli_apool.h
 // begin bli_sba.h
-apool_t* bli_sba_query( void );
+apool_t* bli_sba_query();
 // -----------------------------------------------------------------------------
-void bli_sba_init( void );
-void bli_sba_finalize( void );
+void bli_sba_init();
+void bli_sba_finalize();
 array_t* bli_sba_checkout_array
      (
        siz_t n_threads
@@ -21251,8 +21249,8 @@ void bli_memsys_init( void );
 // end bli_sba.h
 // begin bli_memsys.h
 // -----------------------------------------------------------------------------
-void bli_memsys_init( void );
-void bli_memsys_finalize( void );
+void bli_memsys_init();
+void bli_memsys_finalize();
 // end bli_memsys.h
 // begin bli_mem.h
 // mem_t object type (defined in bli_type_defs.h)
@@ -21557,9 +21555,9 @@ __attribute__ ((visibility ("default"))) double bli_cl
 __attribute__ ((visibility ("default"))) void bli_param_map_blis_to_char_dt( num_t blis_dt, char* dt );
 // end bli_param_map.h
 // begin bli_clock.h
-__attribute__ ((visibility ("default"))) double bli_clock( void );
+__attribute__ ((visibility ("default"))) double bli_clock();
 __attribute__ ((visibility ("default"))) double bli_clock_min_diff( double time_min, double time_start );
-double bli_clock_helper( void );
+double bli_clock_helper();
 // end bli_clock.h
 // begin bli_check.h
 __attribute__ ((visibility ("default"))) err_t bli_check_error_code_helper( gint_t code, const char* file, guint_t line );
@@ -21628,11 +21626,11 @@ __attribute__ ((visibility ("default"))) errlev_t bli_
 err_t bli_check_valid_kc_mod_mult( const blksz_t* kc, const blksz_t* kr );
 // end bli_check.h
 // begin bli_error.h
-__attribute__ ((visibility ("default"))) errlev_t bli_error_checking_level( void );
+__attribute__ ((visibility ("default"))) errlev_t bli_error_checking_level();
 __attribute__ ((visibility ("default"))) void bli_error_checking_level_set( errlev_t new_level );
-__attribute__ ((visibility ("default"))) _Bool bli_error_checking_is_enabled( void );
+__attribute__ ((visibility ("default"))) _Bool bli_error_checking_is_enabled();
 void bli_print_msg( const char* str, const char* file, guint_t line );
-__attribute__ ((visibility ("default"))) void bli_abort( void );
+__attribute__ ((visibility ("default"))) void bli_abort();
 const char* bli_error_string_for_code( gint_t code );
 // end bli_error.h
 // begin bli_f2c.h
@@ -21836,8 +21834,8 @@ void bli_pack_init( void );
 //void  bli_env_set_var( const char* env, dim_t value );
 // end bli_env.h
 // begin bli_pack.h
-void bli_pack_init( void );
-void bli_pack_finalize( void );
+void bli_pack_init();
+void bli_pack_finalize();
 __attribute__ ((visibility ("default"))) void bli_pack_get_pack_a( _Bool* pack_a );
 __attribute__ ((visibility ("default"))) void bli_pack_get_pack_b( _Bool* pack_b );
 __attribute__ ((visibility ("default"))) void bli_pack_set_pack_a( _Bool pack_a );
@@ -21846,41 +21844,41 @@ __attribute__ ((visibility ("default"))) const char* b
 // end bli_pack.h
 // begin bli_info.h
 // -- General library information ----------------------------------------------
-__attribute__ ((visibility ("default"))) const char* bli_info_get_version_str( void );
-__attribute__ ((visibility ("default"))) const char* bli_info_get_int_type_size_str( void );
+__attribute__ ((visibility ("default"))) const char* bli_info_get_version_str();
+__attribute__ ((visibility ("default"))) const char* bli_info_get_int_type_size_str();
 // -- General configuration-related --------------------------------------------
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_int_type_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_num_fp_types( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_max_type_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_page_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_simd_num_registers( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_simd_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_simd_align_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_stack_buf_max_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_stack_buf_align_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_heap_addr_align_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_heap_stride_align_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_a( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_b( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_c( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_gen( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_a( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_b( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_c( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_gen( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_stay_auto_init( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_blas( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_cblas( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_blas_int_type_size( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_pba_pools( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_sba_pools( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_threading( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_openmp( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_pthreads( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_thread_part_jrir_slab( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_thread_part_jrir_rr( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_memkind( void );
-__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_sandbox( void );
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_int_type_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_num_fp_types();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_max_type_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_page_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_simd_num_registers();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_simd_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_simd_align_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_stack_buf_max_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_stack_buf_align_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_heap_addr_align_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_heap_stride_align_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_a();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_b();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_c();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_align_size_gen();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_a();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_b();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_c();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_pool_addr_offset_size_gen();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_stay_auto_init();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_blas();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_cblas();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_blas_int_type_size();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_pba_pools();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_sba_pools();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_threading();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_openmp();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_pthreads();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_thread_part_jrir_slab();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_thread_part_jrir_rr();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_memkind();
+__attribute__ ((visibility ("default"))) gint_t bli_info_get_enable_sandbox();
 // -- Kernel implementation-related --------------------------------------------
 // -- Level-3 kernel definitions --
 __attribute__ ((visibility ("default"))) const char* bli_info_get_gemm_ukr_impl_string( ind_t method, num_t dt );
@@ -21902,16 +21900,16 @@ __attribute__ ((visibility ("default"))) arch_t bli_ar
 __attribute__ ((visibility ("default"))) const char* bli_info_get_trsm_impl_string( num_t dt );
 // end bli_info.h
 // begin bli_arch.h
-__attribute__ ((visibility ("default"))) arch_t bli_arch_query_id( void );
-void bli_arch_set_id_once( void );
-void bli_arch_set_id( void );
+__attribute__ ((visibility ("default"))) arch_t bli_arch_query_id();
+void bli_arch_set_id_once();
+void bli_arch_set_id();
 __attribute__ ((visibility ("default"))) const char* bli_arch_string( arch_t id );
 void bli_arch_set_logging( _Bool dolog );
-_Bool bli_arch_get_logging( void );
+_Bool bli_arch_get_logging();
 void bli_arch_log( const char*, ... );
 // end bli_arch.h
 // begin bli_cpuid.h
-arch_t bli_cpuid_query_id( void );
+arch_t bli_cpuid_query_id();
 // Intel
 _Bool bli_cpuid_is_skx( uint32_t family, uint32_t model, uint32_t features );
 _Bool bli_cpuid_is_knl( uint32_t family, uint32_t model, uint32_t features );
@@ -21950,7 +21948,7 @@ int vpu_count( void );
 // for more information why this move was made.
 //#include "cpuid.h"
 void get_cpu_name( char *cpu_name );
-int vpu_count( void );
+int vpu_count();
 enum
 {
  VENDOR_INTEL = 0,
! void bli_copym(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_subm(const obj_t * x , const obj_t * y);

! skipped the procedure using obj_t
! void bli_addv_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_copyv_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_subv_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_swapv_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_addd_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_copyd_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_subd_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_addm_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_copym_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_subm_ex(const obj_t * x , const obj_t * y , const cntx_t * cntx , rntm_t * rntm);

! skipped the procedure using obj_t
! void bli_eqsc(const obj_t * x , const obj_t * y , _Bool * is_eq);

! skipped the procedure using obj_t
! void bli_eqv(const obj_t * x , const obj_t * y , _Bool * is_eq);

! skipped the procedure using obj_t
! void bli_eqm(const obj_t * x , const obj_t * y , _Bool * is_eq);

! skipped the procedure using obj_t
! void bli_dotv(const obj_t * x , const obj_t * y , const obj_t * rho);

! skipped the procedure using obj_t
! void bli_dotv_ex(const obj_t * x , const obj_t * y , const obj_t * rho , const cntx_t * cntx , rntm_t * rntm);

interface
! void bli_ssetsc(double zeta_r, double zeta_i, float * chi)
subroutine bli_ssetsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_double), value, intent(in) :: zeta_r
  real(c_double), value, intent(in) :: zeta_i
  real(c_float), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_dsetsc(double zeta_r, double zeta_i, double * chi)
subroutine bli_dsetsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_double), value, intent(in) :: zeta_r
  real(c_double), value, intent(in) :: zeta_i
  real(c_double), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_zsetsc(double zeta_r, double zeta_i, dcomplex * chi)
subroutine bli_zsetsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_double), value, intent(in) :: zeta_r
  real(c_double), value, intent(in) :: zeta_i
  complex(c_double), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_isetsc(double zeta_r, double zeta_i, dim_t * chi)
subroutine bli_isetsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_double), value, intent(in) :: zeta_r
  real(c_double), value, intent(in) :: zeta_i
  integer(dim_t), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_csetsc(double zeta_r, double zeta_i, scomplex * chi)
subroutine bli_csetsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_double), value, intent(in) :: zeta_r
  real(c_double), value, intent(in) :: zeta_i
  complex(c_float), dimension(*), intent(inout) :: chi
end subroutine
end interface

! skipped the procedure using obj_t
! void bli_setsc(double zeta_r , double zeta_i , const obj_t * chi);

interface
! void bli_szipsc(const float * zeta_r, const float * zeta_i, float * chi)
subroutine bli_szipsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_float), dimension(*), intent(in) :: zeta_r
  real(c_float), dimension(*), intent(in) :: zeta_i
  real(c_float), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_czipsc(const float * zeta_r, const float * zeta_i, scomplex * chi)
subroutine bli_czipsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_float), dimension(*), intent(in) :: zeta_r
  real(c_float), dimension(*), intent(in) :: zeta_i
  complex(c_float), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_dzipsc(const double * zeta_r, const double * zeta_i, double * chi)
subroutine bli_dzipsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_double), dimension(*), intent(in) :: zeta_r
  real(c_double), dimension(*), intent(in) :: zeta_i
  real(c_double), dimension(*), intent(inout) :: chi
end subroutine
end interface

interface
! void bli_zzipsc(const double * zeta_r, const double * zeta_i, dcomplex * chi)
subroutine bli_zzipsc(zeta_r, zeta_i, chi) bind(c)
    use blis_kinds
  real(c_double), dimension(*), intent(in) :: zeta_r
  real(c_double), dimension(*), intent(in) :: zeta_i
  complex(c_double), dimension(*), intent(inout) :: chi
end subroutine
end interface

! skipped the procedure using obj_t
! void bli_zipsc(const obj_t * zeta_r , const obj_t * zeta_i , const obj_t * chi);

